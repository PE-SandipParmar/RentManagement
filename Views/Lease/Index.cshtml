@model PagedResult<Lease>
@{
    ViewData["Title"] = "Lease Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="p-1">
    <!-- Breadcrumb Navigation -->
    <nav class="flex mb-6" aria-label="Breadcrumb">
        <ol class="inline-flex items-center space-x-1 md:space-x-3">
            <li class="inline-flex items-center">
                <a href="@Url.Action("Index", "Home")" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-primary">
                    <i class="ri-home-line mr-2"></i>
                    Dashboard
                </a>
            </li>
            <li>
                <div class="flex items-center">
                    <i class="ri-arrow-right-s-line text-gray-400"></i>
                    <span class="ml-1 text-sm font-medium text-gray-500 md:ml-2">Lease Management</span>
                </div>
            </li>
        </ol>
    </nav>

    <!-- Success/Error Messages -->
    <div id="alertContainer" class="mb-4"></div>

    <!-- Page Header -->
    <div class="flex items-center justify-between mb-6">
        <div>
            <h2 class="text-2xl font-bold text-gray-900">Lease Management</h2>
            <p class="text-gray-600 mt-1">Manage lease agreements and rental properties</p>
        </div>
        <a href="@Url.Action("Create")" class="rounded bg-primary text-white px-4 py-2 text-sm hover:bg-primary/90 flex items-center">
            <i class="ri-add-line mr-2"></i>
            Add New Lease
        </a>
    </div>

    <!-- Filters/Search -->
    <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-100 mb-6">
        <form method="get" id="searchForm">
            <div class="flex flex-col md:flex-row gap-4">
                <!-- Search Bar -->
                <div class="flex-1">
                    <div class="relative">
                        <i class="ri-search-line absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                        <input type="text" name="search" value="@ViewBag.Search" id="searchInput"
                               placeholder="Search by name, email or code..."
                               class="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent">
                    </div>
                </div>
                <!-- Page Size Selection -->
                <div class="relative">
                    <select name="PageSize" asp-for="PageSize" class="appearance-none bg-white border border-gray-200 rounded-lg px-4 py-2 pr-8 focus:ring-2 focus:ring-primary focus:border-transparent" 
                            asp-items="@(new SelectList(new[] {10,25,50,100}, ViewBag.PageSize))" onchange="document.getElementById('searchForm').submit()">
                    </select>
                    <i class="ri-arrow-down-s-line absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none"></i>
                </div>
                <!-- Search and Clear Buttons -->
                <div class="flex gap-2">
                    <button type="submit" class="bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary/90 flex items-center">
                        <i class="ri-search-line mr-2"></i>
                        Search
                    </button>
                    @if (!string.IsNullOrEmpty(ViewBag.Search as string))
                    {
                        <a href="@Url.Action("Index")" class="bg-gray-400 hover:bg-gray-500 text-white px-4 py-2 rounded-lg font-medium transition duration-200 flex items-center">
                            <i class="ri-close-line mr-2"></i>
                            Clear
                        </a>
                    }
                </div>
            </div>
            <input type="hidden" name="page" value="1" />
        </form>
    </div>

    <!-- Data Table -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-100 overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            <input type="checkbox" id="selectAll">
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Lease Number</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tenant Name</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Vendor Name</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total Lease Amount</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Monthly Lease Amount</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Lease Status</th>
                        <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var lease in Model.Items)
                    {
                        <tr class="hover:bg-gray-50 table-row">
                            <td class="px-4 py-4 text-center">
                                <input type="checkbox" class="lease-checkbox">
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm font-medium text-gray-900">@lease.RefNo</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm text-gray-900">@lease.EmployeeName</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm text-gray-900">@lease.VendorName</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm font-medium text-gray-900">@(Convert.ToDecimal(lease.TotalLeaseAmount).ToString("C") ?? "N/A")</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm font-medium text-gray-900">@(Convert.ToDecimal(lease.MonthlyRentPayable).ToString("C") ?? "N/A")</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <form method="post" asp-controller="SecurityDeposit" asp-action="ToggleStatus" asp-route-id="@lease.Id">
                                    <button type="submit" class="hover:opacity-80 transition-opacity">
                                        @{
                                            string statusText = lease.Status;
                                            string bgColor = "";
                                            string textColor = "";
                                            string dotColor = "";

                                            switch (statusText)
                                            {
                                                case "Active":
                                                    bgColor = "bg-green-100";
                                                    textColor = "text-green-800";
                                                    dotColor = "bg-green-400";
                                                    break;
                                                case "Expired":
                                                    bgColor = "bg-gray-100";
                                                    textColor = "text-gray-800";
                                                    dotColor = "bg-gray-400";
                                                    break;
                                                case "Upcoming":
                                                    bgColor = "bg-yellow-100";
                                                    textColor = "text-yellow-800";
                                                    dotColor = "bg-yellow-400";
                                                    break;
                                                case "Terminated":
                                                    bgColor = "bg-red-100";
                                                    textColor = "text-red-800";
                                                    dotColor = "bg-red-400";
                                                    break;
                                                default:
                                                    bgColor = "bg-blue-100";
                                                    textColor = "text-blue-800";
                                                    dotColor = "bg-blue-400";
                                                    break;
                                            }
                                        }

                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @bgColor @textColor">
                                            <span class="w-1.5 h-1.5 @dotColor rounded-full mr-1.5"></span>
                                            @statusText
                                        </span>
                                    </button>
                                </form>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-center">
                                <div class="flex gap-2 justify-center">
                                    <a href="@Url.Action("Details", new { id = lease.Id })" class="text-primary hover:text-primary/80" title="View Details">
                                        <i class="ri-eye-line"></i>
                                    </a>
                                    <a href="@Url.Action("Edit", new { id = lease.Id })" class="text-green-600 hover:text-green-800" title="Edit">
                                        <i class="ri-edit-line"></i>
                                    </a>
                                    <a href="@Url.Action("Delete", new { id = lease.Id })" class="text-red-600 hover:text-red-700" title="Delete" 
                                       onclick="return confirm('Are you sure you want to delete this lease?')">
                                        <i class="ri-delete-bin-line"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Empty State -->
        @if (!Model.Items.Any())
        {
            <div class="px-6 py-12 text-center">
                <div class="text-gray-500">
                    <i class="ri-file-list-line text-4xl text-gray-300 mb-4"></i>
                    @if (!string.IsNullOrEmpty(ViewBag.Search as string))
                    {
                        <p class="text-lg font-medium text-gray-900 mb-2">No leases found</p>
                        <p class="text-sm">No leases found matching your search criteria.</p>
                    }
                    else
                    {
                        <p class="text-lg font-medium text-gray-900 mb-2">No leases found</p>
                        <p class="text-sm mb-4">Get started by creating your first lease agreement.</p>
                        <a href="@Url.Action("Create")" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary hover:bg-primary/90">
                            <i class="ri-add-line mr-2"></i>
                            Create First Lease
                        </a>
                    }
                </div>
            </div>
        }

        <!-- Pagination -->
        <div class="bg-white px-6 py-3 border-t border-gray-200 flex items-center justify-between">
            <div class="flex items-center text-sm text-gray-700">
                <span>
                    Showing @(((Model.PageNumber - 1) * Model.PageSize) + 1)
                    to @Math.Min(Model.PageNumber * Model.PageSize, Model.TotalItems)
                    of @Model.TotalItems results
                </span>
            </div>

            <div class="flex items-center space-x-2">
                @if (Model.HasPreviousPage)
                {
                    <a href="@Url.Action("Index", new { page = Model.PageNumber - 1, search = ViewBag.Search, PageSize = ViewBag.PageSize })"
                       class="relative inline-flex items-center px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                        <i class="ri-arrow-left-s-line mr-1"></i>
                        Previous
                    </a>
                }
                else
                {
                    <span class="relative inline-flex items-center px-3 py-2 text-sm font-medium text-gray-400 bg-gray-100 border border-gray-300 rounded-md cursor-not-allowed">
                        <i class="ri-arrow-left-s-line mr-1"></i>
                        Previous
                    </span>
                }

                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    if (i == Model.PageNumber)
                    {
                        <span class="relative inline-flex items-center px-3 py-2 text-sm font-medium text-white bg-primary border border-primary rounded-md">
                            @i
                        </span>
                    }
                    else
                    {
                        <a href="@Url.Action("Index", new { page = i, search = ViewBag.Search, PageSize = ViewBag.PageSize })"
                           class="relative inline-flex items-center px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                            @i
                        </a>
                    }
                }

                @if (Model.HasNextPage)
                {
                    <a href="@Url.Action("Index", new { page = Model.PageNumber + 1, search = ViewBag.Search, PageSize = ViewBag.PageSize })"
                       class="relative inline-flex items-center px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
                        Next
                        <i class="ri-arrow-right-s-line ml-1"></i>
                    </a>
                }
                else
                {
                    <span class="relative inline-flex items-center px-3 py-2 text-sm font-medium text-gray-400 bg-gray-100 border border-gray-300 rounded-md cursor-not-allowed">
                        Next
                        <i class="ri-arrow-right-s-line ml-1"></i>
                    </span>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Initialize page
        document.addEventListener('DOMContentLoaded', function () {
            initializeEventListeners();
        });

        // Event listeners
        function initializeEventListeners() {
            // Search functionality
            document.getElementById('searchInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    document.getElementById('searchForm').submit();
                }
            });

            // Select all checkbox
            const selectAllCheckbox = document.getElementById('selectAll');
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', function() {
                    const checkboxes = document.querySelectorAll('.lease-checkbox');
                    checkboxes.forEach(checkbox => {
                        checkbox.checked = this.checked;
                    });
                });
            }

            // Individual checkboxes
            const leaseCheckboxes = document.querySelectorAll('.lease-checkbox');
            leaseCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const allChecked = Array.from(leaseCheckboxes).every(cb => cb.checked);
                    const noneChecked = Array.from(leaseCheckboxes).every(cb => !cb.checked);
                    
                    if (selectAllCheckbox) {
                        if (allChecked) {
                            selectAllCheckbox.checked = true;
                            selectAllCheckbox.indeterminate = false;
                        } else if (noneChecked) {
                            selectAllCheckbox.checked = false;
                            selectAllCheckbox.indeterminate = false;
                        } else {
                            selectAllCheckbox.checked = false;
                            selectAllCheckbox.indeterminate = true;
                        }
                    }
                });
            });
        }

        // Utility functions
        function showAlert(type, message) {
            const container = document.getElementById('alertContainer');
            const alertClass = type === 'success' 
                ? 'bg-green-100 border-green-400 text-green-700' 
                : 'bg-red-100 border-red-400 text-red-700';
            
            container.innerHTML = `
                <div class="${alertClass} px-4 py-3 rounded border flex items-center" role="alert">
                    <i class="ri-${type === 'success' ? 'check-line' : 'error-warning-line'} mr-2"></i>
                    <span class="block sm:inline">${message}</span>
                    <button onclick="this.parentElement.remove()" class="ml-auto pl-3">
                        <i class="ri-close-line text-lg hover:opacity-70"></i>
                    </button>
                </div>
            `;
            
            setTimeout(() => {
                const alert = container.querySelector('.border');
                if (alert) {
                    alert.style.opacity = '0';
                    alert.style.transform = 'translateY(-10px)';
                    setTimeout(() => {
                        container.innerHTML = '';
                    }, 300);
                }
            }, 5000);
        }

        // Show success message if available
        @if (TempData["SuccessMessage"] != null)
        {
            <text>
            setTimeout(() => {
                showAlert('success', '@TempData["SuccessMessage"]');
            }, 100);
            </text>
        }

        // Show error message if available
        @if (TempData["ErrorMessage"] != null)
        {
            <text>
            setTimeout(() => {
                showAlert('error', '@TempData["ErrorMessage"]');
            }, 100);
            </text>
        }
    </script>
}

<style>
    .table-row:hover {
        background-color: #f9fafb;
    }

    /* Custom primary color - adjust as needed */
    :root {
        --primary-color: #3b82f6;
        --primary-color-hover: #2563eb;
    }

    .bg-primary {
        background-color: var(--primary-color);
    }

    .text-primary {
        color: var(--primary-color);
    }

    .border-primary {
        border-color: var(--primary-color);
    }

    .bg-primary\/90 {
        background-color: var(--primary-color-hover);
    }

    .hover\:bg-primary\/90:hover {
        background-color: var(--primary-color-hover);
    }

    .text-primary\/80 {
        color: rgba(59, 130, 246, 0.8);
    }

    .hover\:text-primary\/80:hover {
        color: rgba(59, 130, 246, 0.8);
    }

    /* Alert animations */
    #alertContainer .border {
        transition: all 0.3s ease-out;
    }

    /* Checkbox indeterminate state styling */
    input[type="checkbox"]:indeterminate {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
        background-image: url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M4 8h8'/%3e%3c/svg%3e");
    }

    /* Status badge improvements */
    .status-badge {
        transition: all 0.2s ease;
    }

    /* Hover effects for action buttons */
    .table-row a, .table-row button {
        transition: all 0.2s ease;
        padding: 0.25rem;
        border-radius: 0.25rem;
    }

    .table-row a:hover, .table-row button:hover {
        background-color: rgba(0, 0, 0, 0.05);
        transform: scale(1.05);
    }

    /* Loading states */
    .loading {
        opacity: 0.6;
        pointer-events: none;
    }

    /* Responsive improvements */
  /*   media (max-width: 768px) {
        .table-responsive {
            font-size: 0.875rem;
        }
        
        .px-6 {
            padding-left: 1rem;
            padding-right: 1rem;
        }
        
        .py-4 {
            padding-top: 0.75rem;
            padding-bottom: 0.75rem;
        }
    } */
</style>