@model RentManagement.Models.Vendor.VendorListViewModel
@{
    ViewData["Title"] = "Owner Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var employees = ViewBag.Employees as List<RentManagement.Models.Employee> ?? new List<RentManagement.Models.Employee>();
    var isChecker = Model.CurrentUserRole == RentManagement.Models.UserRole.Checker || Model.CurrentUserRole == RentManagement.Models.UserRole.Admin;
    var isMaker = Model.CurrentUserRole == RentManagement.Models.UserRole.Maker;
}

<div class="p-1">
    <nav class="flex mb-6" aria-label="Breadcrumb">
        <ol class="inline-flex items-center space-x-1 md:space-x-3">
            <li class="inline-flex items-center">
                <a href="@Url.Action("Index", "Home")" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-primary">
                    <i class="ri-home-line mr-2"></i>
                    Dashboard
                </a>
            </li>
            <li>
                <div class="flex items-center">
                    <i class="ri-arrow-right-s-line text-gray-400"></i>
                    <span class="ml-1 text-sm font-medium text-gray-500 md:ml-2">Owner Management</span>
                </div>
            </li>
        </ol>
    </nav>

    <!-- Success/Error Messages -->
    <div id="alertContainer" class="mb-4"></div>

    <!-- Page Header -->
    <div class="flex items-center justify-between mb-6">
        <div>
            <h2 class="text-2xl font-bold text-gray-900">Owner Management</h2>
            <p class="text-gray-600 mt-1">Manage your organization's owners and their information</p>
        </div>
        @if (isMaker || Model.CurrentUserRole == RentManagement.Models.UserRole.Admin)
        {
            <button onclick="openCreateDrawer()" class="rounded bg-primary text-white px-4 py-2 text-sm hover:bg-primary/90 flex items-center">
                <i class="ri-add-line mr-2"></i>
                Add Owner
            </button>
        }
    </div>

    <!-- Pending Approvals Section (Checker Only) -->
    @if (isChecker && Model.PendingApprovals.Any())
    {
        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-yellow-800">Pending Approvals (@Model.TotalRecords)</h3>
                <button onclick="showAllPendingApprovals()" class="text-sm text-yellow-700 hover:text-yellow-900">View All</button>
            </div>
            <div class="space-y-3">
                @foreach (var vendor in Model.PendingApprovals.Take(3))
                {
                    <div class="bg-white rounded border p-3 flex items-center justify-between">
                        <div class="flex-1">
                            <div class="flex items-center space-x-4">
                                <div>
                                    <span class="font-medium text-gray-900">@vendor.VendorName</span>
                                    <span class="text-sm text-gray-500">(@vendor.VendorCode)</span>
                                </div>
                                <div class="text-sm text-gray-600">
                                    Action: <span class="font-medium">@vendor.MakerAction.ToString()</span>
                                </div>
                                <div class="text-sm text-gray-600">
                                    By: <span class="font-medium">@vendor.MakerUserName</span>
                                </div>
                            </div>
                        </div>
                        <div class="flex space-x-2">
                            <button onclick="viewVendor(@vendor.Id)" class="text-sm bg-blue-100 text-blue-700 px-3 py-1 rounded hover:bg-blue-200">
                                View
                            </button>
                            <button onclick="approveVendor(@vendor.Id)" class="text-sm bg-green-100 text-green-700 px-3 py-1 rounded hover:bg-green-200">
                                Approve
                            </button>
                            <button onclick="openRejectModal(@vendor.Id, '@vendor.VendorName')" class="text-sm bg-red-100 text-red-700 px-3 py-1 rounded hover:bg-red-200">
                                Reject
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    <!-- Filters/Search -->
    <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-100 mb-6">
        <div class="flex flex-col md:flex-row gap-4">
            <!-- Search Bar -->
            <div class="flex-1">
                <div class="relative">
                    <i class="ri-search-line absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                    <input type="text" id="searchInput" placeholder="Search owners..."
                           value="@Model.SearchTerm"
                           class="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent">
                </div>
            </div>
            <!-- Status Filter -->
            <div class="relative">
                <select id="statusFilter" class="appearance-none bg-white border border-gray-200 rounded-lg px-4 py-2 pr-8 focus:ring-2 focus:ring-primary focus:border-transparent">
                    <option value="">All Status</option>
                    @if (Model.StatusFilter == "Active")
                    {
                        <option value="Active" selected>Active</option>
                    }
                    else
                    {
                        <option value="Active">Active</option>
                    }
                    @if (Model.StatusFilter == "Inactive")
                    {
                        <option value="Inactive" selected>Inactive</option>
                    }
                    else
                    {
                        <option value="Inactive">Inactive</option>
                    }
                </select>
                <i class="ri-arrow-down-s-line absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none"></i>
            </div>
            <!-- Approval Status Filter (Checker Only) -->
            @if (isChecker || isMaker)
            {
                <div class="relative">
                    <select id="approvalStatusFilter" class="appearance-none bg-white border border-gray-200 rounded-lg px-4 py-2 pr-8 focus:ring-2 focus:ring-primary focus:border-transparent">
                        @if (Model.ApprovalStatusFilter == "Pending" || string.IsNullOrEmpty(Model.ApprovalStatusFilter))
                        {
                            <option value="Pending" selected>Pending</option>
                        }
                        else
                        {
                            <option value="Pending">Pending</option>
                        }
                    @if (Model.ApprovalStatusFilter == "Approved" )
                        {
                            <option value="Approved" selected>Approved</option>
                        }
                        else
                        {
                            <option value="Approved">Approved</option>
                        }
                      
                        @if (Model.ApprovalStatusFilter == "Rejected")
                        {
                            <option value="Rejected" selected>Rejected</option>
                        }
                        else
                        {
                            <option value="Rejected">Rejected</option>
                        }
                    </select>
                    <i class="ri-arrow-down-s-line absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none"></i>
                </div>
            }
            <button onclick="searchVendors()" class="bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary/90">Search</button>
        </div>
    </div>

    <!-- Data Table -->
    <div class="flex justify-end items-center mb-2">
        <div class="flex items-center">
            <label for="pageSize" class="mr-2 text-sm text-gray-700">Rows per page:</label>
            <select id="pageSize" onchange="changePageSize()" class="border border-gray-300 rounded px-2 py-1 text-sm">
                <option value="5">5</option>
                <option value="10" selected>10</option>
                <option value="20">20</option>
                <option value="50">50</option>
            </select>
        </div>
    </div>

    <div class="bg-white rounded-lg shadow-sm border border-gray-100 overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            <input type="checkbox" id="selectAll">
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Owner Code</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Owner Name</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Mobile Number</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">IFSC Code</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Bank Name</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        @if (isChecker)
                        {
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Approval</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Maker</th>
                        }
                        <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                    </tr>
                </thead>
                <tbody id="vendorTableBody" class="bg-white divide-y divide-gray-200">
                    @foreach (var vendor in Model.Vendors)
                    {
                        <tr class="table-row">
                            <td class="px-4 py-4 text-center">
                                <input type="checkbox" class="vendor-checkbox">
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@vendor.VendorCode</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@vendor.VendorName</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@vendor.MobileNumber</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@vendor.IFSCCode</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@vendor.BankName</td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="status-badge @(vendor.Status == "Active" ? "status-active" : "status-inactive")">
                                    @vendor.Status
                                </span>
                            </td>
                            @if (isChecker)
                            {
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @if (vendor.ApprovalStatus == RentManagement.Models.ApprovalStatus.Pending)
                                    {
                                        <span class="status-badge status-pending">Pending</span>
                                    }
                                    else if (vendor.ApprovalStatus == RentManagement.Models.ApprovalStatus.Approved)
                                    {
                                        <span class="status-badge status-approved">Approved</span>
                                    }
                                    else if (vendor.ApprovalStatus == RentManagement.Models.ApprovalStatus.Rejected)
                                    {
                                        <span class="status-badge status-rejected">Rejected</span>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@vendor.MakerUserName</td>
                            }
                            <td class="px-6 py-4 whitespace-nowrap text-center">
                                <div class="flex gap-2 justify-center">
                                    <button onclick="viewVendor(@vendor.Id)" class="text-primary hover:text-primary/80" title="View">
                                        <i class="ri-eye-line"></i>
                                    </button>
                                    @if (vendor.ApprovalStatus == RentManagement.Models.ApprovalStatus.Pending && isChecker)
                                    {
                                        <button onclick="approveVendor(@vendor.Id)" class="text-green-600 hover:text-green-800" title="Approve">
                                            <i class="ri-check-line"></i>
                                        </button>
                                        <button onclick="openRejectModal(@vendor.Id, '@vendor.VendorName')" class="text-red-600 hover:text-red-700" title="Reject">
                                            <i class="ri-close-line"></i>
                                        </button>
                                    }
                                    @if (vendor.ApprovalStatus == RentManagement.Models.ApprovalStatus.Approved && (isMaker || Model.CurrentUserRole == RentManagement.Models.UserRole.Admin))
                                    {
                                        <button onclick="editVendor(@vendor.Id)" class="text-green-600 hover:text-green-800" title="Edit">
                                            <i class="ri-edit-line"></i>
                                        </button>
                                        <button onclick="confirmDeleteVendor(@vendor.Id, '@vendor.VendorName')" class="text-red-600 hover:text-red-700" title="Delete">
                                            <i class="ri-delete-bin-line"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div id="pagination" class="bg-white px-6 py-3 border-t border-gray-200 flex items-center justify-between">
            <div class="flex items-center text-sm text-gray-700">
                <span id="paginationInfo">Showing @((Model.CurrentPage - 1) * Model.PageSize + 1) to @Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalRecords) of @Model.TotalRecords results</span>
            </div>
            <div class="flex items-center space-x-2" id="paginationButtons">
                <!-- Pagination buttons will be generated by JavaScript -->
            </div>
        </div>
    </div>
</div>

<!-- Reject Vendor Modal -->
<div id="rejectModal" class="fixed inset-0 z-50 flex items-center justify-center hidden">
    <div class="fixed inset-0 bg-gray-500 bg-opacity-50" onclick="closeRejectModal()"></div>
    <div class="bg-white rounded-lg shadow-lg max-w-md w-full mx-4 relative">
        <div class="p-6">
            <div class="flex items-center mb-4">
                <div class="flex-shrink-0">
                    <i class="ri-error-warning-line text-red-400 text-2xl"></i>
                </div>
                <div class="ml-3">
                    <h3 class="text-lg font-medium text-gray-900">Reject Owner</h3>
                </div>
            </div>
            <div class="mb-4">
                <p class="text-sm text-gray-500 mb-3">Are you sure you want to reject <strong id="rejectVendorName"></strong>?</p>
                <textarea id="rejectionReason" placeholder="Please provide a reason for rejection..."
                          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                          rows="3" required></textarea>
            </div>
            <div class="flex justify-end space-x-3">
                <button type="button" onclick="closeRejectModal()" class="px-4 py-2 text-sm text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg">
                    Cancel
                </button>
                <button type="button" onclick="rejectVendor()" class="px-4 py-2 text-sm text-white bg-red-600 hover:bg-red-700 rounded-lg">
                    Reject
                </button>
            </div>
        </div>
    </div>
</div>


<!-- Create Vendor Slide-over -->
<div id="createVendorDrawer" class="fixed inset-0 z-50 hidden">
    <div class="fixed inset-0 bg-gray-500 bg-opacity-50 slide-over-backdrop" onclick="closeCreateDrawer()"></div>
    <div class="fixed right-0 top-0 h-full w-full max-w-2xl bg-white shadow-xl transform translate-x-full transition-transform duration-300" id="createDrawerPanel">
        <div class="flex flex-col h-full">
            <!-- Header -->

            <div class="px-6 py-4 bg-blue-600 text-white">
                <div class="flex items-center justify-between">
                    <h2 id="drawerTitle" class="text-xl font-semibold">Add New Owner</h2>
                    <button onclick="closeCreateDrawer()" class="text-white hover:text-gray-200">
                        <i class="ri-close-line text-2xl"></i>
                    </button>
                </div>
            </div>
            <!-- Form Content -->
            <div class="flex-1 overflow-y-auto">
                <form id="createVendorForm" class="p-6 space-y-6">
                    <!-- Vendor Details Section -->
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="text-md font-semibold text-gray-900 mb-4">Owner Details</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Owner Code <span class="text-red-500">*</span></label>
                                <input type="text" name="vendorCode" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" />
                                <div class="error-text hidden" data-field="vendorCode"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Owner Name <span class="text-red-500">*</span></label>
                                <input type="text" name="vendorName" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" />
                                <div class="error-text hidden" data-field="vendorName"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">PAN Number <span class="text-red-500">*</span></label>
                                <input type="text" name="panNumber" maxlength="10" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" style="text-transform: uppercase;" placeholder="ABCDE1234F" />
                                <div class="error-text hidden" data-field="panNumber"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Mobile Number <span class="text-red-500">*</span></label>
                                <input type="text" name="mobileNumber" maxlength="10" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="9876543210" />
                                <div class="error-text hidden" data-field="mobileNumber"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Alternate Number</label>
                                <input type="text" name="alternateNumber" maxlength="10" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="9876543210" />
                                <div class="error-text hidden" data-field="alternateNumber"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Email ID <span class="text-red-500">*</span></label>
                                <input type="email" name="emailId" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="vendor@example.com" />
                                <div class="error-text hidden" data-field="emailId"></div>
                            </div>
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700 mb-1">Address <span class="text-red-500">*</span></label>
                                <textarea name="address" rows="3" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="Enter complete address"></textarea>
                                <div class="error-text hidden" data-field="address"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Bank Details Section -->
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="text-md font-semibold text-gray-900 mb-4">Bank Details</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Account Holder Name <span class="text-red-500">*</span></label>
                                <input type="text" name="accountHolderName" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" pattern="[a-zA-Z\s]+" title="" />
                                <div class="error-text hidden" data-field="accountHolderName"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Bank Name <span class="text-red-500">*</span></label>
                                <input type="text" name="bankName" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" pattern="[a-zA-Z\s]+" title="" />
                                <div class="error-text hidden" data-field="bankName"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Branch Name <span class="text-red-500">*</span></label>
                                <input type="text" name="branchName" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" pattern="[a-zA-Z\s]+" title="" />
                                <div class="error-text hidden" data-field="branchName"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Account Number <span class="text-red-500">*</span></label>
                                <input type="text" name="accountNumber" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" />
                                <div class="error-text hidden" data-field="accountNumber"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">IFSC Code <span class="text-red-500">*</span></label>
                                <input type="text" name="ifscCode" maxlength="11" required
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                                       style="text-transform: uppercase;"
                                       pattern="^[A-Z]{4}0[A-Z0-9]{6}$"
                                       placeholder="SBIN0001234"
                                       title="IFSC Code format: 4 letters + 0 + 6 alphanumeric characters" />  <div class="error-text hidden" data-field="ifscCode"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Property Details Section -->
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="text-md font-semibold text-gray-900 mb-4">Property Details</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700 mb-1">Property Address <span class="text-red-500">*</span></label>
                                <textarea name="propertyAddress" rows="3" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="Enter property address"></textarea>
                                <div class="error-text hidden" data-field="propertyAddress"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Total Rent Amount <span class="text-red-500">*</span></label>
                                <input type="number" name="totalRentAmount" step="0.01" min="0" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="25000.00" />
                                <div class="error-text hidden" data-field="totalRentAmount"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                                <select name="status" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent">
                                    <option value="Active">Active</option>
                                    <option value="Inactive">Inactive</option>
                                </select>
                                <div class="error-text hidden" data-field="status"></div>
                            </div>
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700 mb-1">Linked Employees</label>
                                <div id="createEmployeeList" class="border border-gray-300 rounded-lg p-3 max-h-40 overflow-y-auto">
                                    @foreach (var employee in employees)
                                    {
                                        <div class="flex items-center mb-2">
                                            <input type="checkbox" name="linkedEmployees" value="@employee.Name" id="create_emp_@employee.Id" class="mr-2" />
                                            <label for="create_emp_@employee.Id" class="text-sm text-gray-700">@employee.Name (@employee.Code)</label>
                                        </div>
                                    }
                                </div>
                                <div class="error-text hidden" data-field="linkedEmployees"></div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>

            <!-- Footer -->
            <div class="flex justify-end space-x-3 px-6 py-4 border-t border-gray-200 bg-gray-50">
                <button type="button" onclick="closeCreateDrawer()" class="px-4 py-2 text-sm text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg">
                    Cancel
                </button>
                <button type="button" onclick="submitCreateForm()" class="px-4 py-2 text-sm text-white bg-primary hover:bg-primary/90 rounded-lg">
                    Save Owner
                </button>
            </div>
        </div>
    </div>
</div>


<!-- Edit Vendor Slide-over -->
<div id="editVendorDrawer" class="fixed inset-0 z-50 hidden">
    <div class="fixed inset-0 bg-gray-500 bg-opacity-50 slide-over-backdrop" onclick="closeEditDrawer()"></div>
    <div class="fixed right-0 top-0 h-full w-full max-w-2xl bg-white shadow-xl transform translate-x-full transition-transform duration-300" id="editDrawerPanel">
        <div class="flex flex-col h-full">
            <!-- Header -->
            <div class="flex items-center justify-between px-6 py-4 border-b border-gray-200 bg-gray-50">
                <h2 class="text-lg font-semibold text-gray-900">Edit Owner</h2>
                <button onclick="closeEditDrawer()" class="text-gray-400 hover:text-gray-600">
                    <i class="ri-close-line text-xl"></i>
                </button>
            </div>

            <!-- Form Content -->
            <div class="flex-1 overflow-y-auto">
                <form id="editVendorForm" class="p-6 space-y-6">
                    <input type="hidden" name="vendorId" />
                    <!-- Same form structure as create, with error divs -->
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="text-md font-semibold text-gray-900 mb-4">Owner Details</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Owner Code <span class="text-red-500">*</span></label>
                                <input type="text" name="vendorCode" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" />
                                <div class="error-text hidden" data-field="vendorCode"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Owner Name <span class="text-red-500">*</span></label>
                                <input type="text" name="vendorName" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" />
                                <div class="error-text hidden" data-field="vendorName"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">PAN Number <span class="text-red-500">*</span></label>
                                <input type="text" name="panNumber" maxlength="10" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" style="text-transform: uppercase;" placeholder="ABCDE1234F" />
                                <div class="error-text hidden" data-field="panNumber"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Mobile Number <span class="text-red-500">*</span></label>
                                <input type="text" name="mobileNumber" maxlength="10" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="9876543210" />
                                <div class="error-text hidden" data-field="mobileNumber"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Alternate Number</label>
                                <input type="text" name="alternateNumber" maxlength="10" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="9876543210" />
                                <div class="error-text hidden" data-field="alternateNumber"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Email ID <span class="text-red-500">*</span></label>
                                <input type="email" name="emailId" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="vendor@example.com" />
                                <div class="error-text hidden" data-field="emailId"></div>
                            </div>
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700 mb-1">Address <span class="text-red-500">*</span></label>
                                <textarea name="address" rows="3" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="Enter complete address"></textarea>
                                <div class="error-text hidden" data-field="address"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Bank Details Section -->
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="text-md font-semibold text-gray-900 mb-4">Bank Details</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Account Holder Name <span class="text-red-500">*</span></label>
                                <input type="text" name="accountHolderName" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" pattern="[a-zA-Z\s]+" title="" />
                                <div class="error-text hidden" data-field="accountHolderName"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Bank Name <span class="text-red-500">*</span></label>
                                <input type="text" name="bankName" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" pattern="[a-zA-Z\s]+" title="" />
                                <div class="error-text hidden" data-field="bankName"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Branch Name <span class="text-red-500">*</span></label>
                                <input type="text" name="branchName" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" pattern="[a-zA-Z\s]+" title="" />    <div class="error-text hidden" data-field="branchName"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Account Number <span class="text-red-500">*</span></label>
                                <input type="text" name="accountNumber" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" />
                                <div class="error-text hidden" data-field="accountNumber"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">IFSC Code <span class="text-red-500">*</span></label>
                                <input type="text" name="ifscCode" maxlength="11" required
                                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                                       style="text-transform: uppercase;"
                                       pattern="^[A-Z]{4}0[A-Z0-9]{6}$"
                                       placeholder="SBIN0001234"
                                       title="IFSC Code format: 4 letters + 0 + 6 alphanumeric characters" /> <div class="error-text hidden" data-field="ifscCode"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Property Details Section -->
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <h3 class="text-md font-semibold text-gray-900 mb-4">Property Details</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700 mb-1">Property Address <span class="text-red-500">*</span></label>
                                <textarea name="propertyAddress" rows="3" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="Enter property address"></textarea>
                                <div class="error-text hidden" data-field="propertyAddress"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Total Rent Amount <span class="text-red-500">*</span></label>
                                <input type="number" name="totalRentAmount" step="0.01" min="0" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="25000.00" />
                                <div class="error-text hidden" data-field="totalRentAmount"></div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                                <select name="status" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent">
                                    <option value="Active">Active</option>
                                    <option value="Inactive">Inactive</option>
                                </select>
                                <div class="error-text hidden" data-field="status"></div>
                            </div>
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700 mb-1">Linked Employees</label>
                                <div id="editEmployeeList" class="border border-gray-300 rounded-lg p-3 max-h-40 overflow-y-auto">
                                    @foreach (var employee in employees)
                                    {
                                        <div class="flex items-center mb-2">
                                            <input type="checkbox" name="linkedEmployees" value="@employee.Name" id="edit_emp_@employee.Id" class="mr-2" />
                                            <label for="edit_emp_@employee.Id" class="text-sm text-gray-700">@employee.Name (@employee.Code)</label>
                                        </div>
                                    }
                                </div>
                                <div class="error-text hidden" data-field="linkedEmployees"></div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>

            <!-- Footer -->
            <div class="flex justify-end space-x-3 px-6 py-4 border-t border-gray-200 bg-gray-50">
                <button type="button" onclick="closeEditDrawer()" class="px-4 py-2 text-sm text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg">
                    Cancel
                </button>
                <button type="button" onclick="submitEditForm()" class="px-4 py-2 text-sm text-white bg-primary hover:bg-primary/90 rounded-lg">
                    Update Owner
                </button>
            </div>
        </div>
    </div>
</div>
<!-- View Vendor Slide-over -->
<div id="viewVendorDrawer" class="fixed inset-0 z-50 hidden">
    <div class="fixed inset-0 bg-gray-500 bg-opacity-50 slide-over-backdrop" onclick="closeViewDrawer()"></div>
    <div class="fixed right-0 top-0 h-full w-full max-w-2xl bg-white shadow-xl transform translate-x-full transition-transform duration-300" id="viewDrawerPanel">
        <div class="flex flex-col h-full">
            <!-- Header -->
            <div class="flex items-center justify-between px-6 py-4 border-b border-gray-200 bg-gray-50">
                <h2 class="text-lg font-semibold text-gray-900">Owner Details</h2>
                <button onclick="closeViewDrawer()" class="text-gray-400 hover:text-gray-600">
                    <i class="ri-close-line text-xl"></i>
                </button>
            </div>

            <!-- Content -->
            <div class="flex-1 overflow-y-auto p-6">
                <div id="viewVendorDetails">
                    <!-- Details will be populated by JavaScript -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="fixed inset-0 z-50 flex items-center justify-center hidden">
    <div class="fixed inset-0 bg-gray-500 bg-opacity-50" onclick="closeDeleteModal()"></div>
    <div class="bg-white rounded-lg shadow-lg max-w-md w-full mx-4 relative">
        <div class="p-6">
            <div class="flex items-center mb-4">
                <div class="flex-shrink-0">
                    <i class="ri-error-warning-line text-red-400 text-2xl"></i>
                </div>
                <div class="ml-3">
                    <h3 class="text-lg font-medium text-gray-900">Delete Owner</h3>
                </div>
            </div>
            <div class="mb-4">
                <p class="text-sm text-gray-500">Are you sure you want to delete <strong id="deleteVendorName"></strong>? This action cannot be undone.</p>
            </div>
            <div class="flex justify-end space-x-3">
                <button type="button" onclick="closeDeleteModal()" class="px-4 py-2 text-sm text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg">
                    Cancel
                </button>
                <button type="button" onclick="deleteVendor()" class="px-4 py-2 text-sm text-white bg-red-600 hover:bg-red-700 rounded-lg">
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="fixed inset-0 z-50 flex items-center justify-center hidden">
    <div class="fixed inset-0 bg-gray-500 bg-opacity-50" onclick="closeDeleteModal()"></div>
    <div class="bg-white rounded-lg shadow-lg max-w-md w-full mx-4 relative">
        <div class="p-6">
            <div class="flex items-center mb-4">
                <div class="flex-shrink-0">
                    <i class="ri-error-warning-line text-red-400 text-2xl"></i>
                </div>
                <div class="ml-3">
                    <h3 class="text-lg font-medium text-gray-900">Delete Owner</h3>
                </div>
            </div>
            <div class="mb-4">
                <p class="text-sm text-gray-500">Are you sure you want to delete <strong id="deleteVendorName"></strong>? This action cannot be undone.</p>
            </div>
            <div class="flex justify-end space-x-3">
                <button type="button" onclick="closeDeleteModal()" class="px-4 py-2 text-sm text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg">
                    Cancel
                </button>
                <button type="button" onclick="deleteVendor()" class="px-4 py-2 text-sm text-white bg-red-600 hover:bg-red-700 rounded-lg">
                    Delete
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        // Global variables
        let currentPage = @Model.CurrentPage;
        let pageSize = @Model.PageSize;
        let currentVendorId = null;
        let currentUserRole = '@Model.CurrentUserRole';
        let isChecker = @(isChecker ? "true" : "false");

        // Initialize page
        document.addEventListener('DOMContentLoaded', function () {
            initializeEventListeners();
            initializeValidation();
        });

        // Additional approval workflow functions
        function showAllPendingApprovals() {
            document.getElementById('approvalStatusFilter').value = 'Pending';
            //document.getElementById('approvalStatusFilter').value = 'Pending';

            // Clear search term and status filter to show all pending items
            document.getElementById('searchInput').value = '';
            document.getElementById('statusFilter').value = '';

            // Set page size to a large number to show all pending approvals
            // Or you can set it to the total pending count if available
            const originalPageSize = pageSize;
            pageSize = 100; // Set to a large number or use Model.TotalRecords if available

            // Reset to first page
            currentPage = 1;
            searchVendors();
        }

        // Force refresh the table and handle approval workflow
        function refreshTableAfterUpdate() {
            // Reset to first page to ensure we see the changes
            currentPage = 1;

            // Reload the vendors
            loadVendors();

            // If checker, also refresh the pending approvals section
            if (isChecker) {
                setTimeout(() => {
                    location.reload(); // This will refresh the pending approvals section
                }, 1000);
            }
        }
        function closeDrawer() {
            const drawer = document.getElementById('createVendorDrawer');
            drawer.querySelector('.w-screen').classList.remove('translate-x-0');
            setTimeout(() => {
                drawer.classList.add('hidden');
            }, 300);
        }
        function approveVendor(id) {
            if (!confirm('Are you sure you want to approve this vendor?')) {
                return;
            }

            fetch('@Url.Action("ApproveVendor")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: `id=${id}`
            })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        showAlert('success', result.message);
                        refreshTableAfterUpdate();
                    } else {
                        showAlert('error', result.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('error', 'An error occurred while approving the owner.');
                });
        }

        function openRejectModal(id, name) {
            currentVendorId = id;
            document.getElementById('rejectVendorName').textContent = name;
            document.getElementById('rejectionReason').value = '';
            document.getElementById('rejectModal').classList.remove('hidden');
            document.body.style.overflow = 'hidden';
        }

        function closeRejectModal() {
            document.getElementById('rejectModal').classList.add('hidden');
            document.body.style.overflow = 'auto';
            currentVendorId = null;
        }

        function rejectVendor() {
            if (!currentVendorId) return;

            const rejectionReason = document.getElementById('rejectionReason').value.trim();
            if (!rejectionReason) {
                showAlert('error', 'Please provide a reason for rejection.');
                return;
            }

            const data = {
                id: currentVendorId,
                rejectionReason: rejectionReason
            };

            fetch('@Url.Action("RejectVendor")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        showAlert('success', result.message);
                        closeRejectModal();
                        refreshTableAfterUpdate();
                    } else {
                        showAlert('error', result.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('error', 'An error occurred while rejecting the owner.');
                });
        }
        function validateBankFields(input) {
            const namePattern = /^[a-zA-Z\s]+$/;
            if (input.value && !namePattern.test(input.value)) {
                const fieldName = input.name === 'bankName' ? 'Bank Name' :
                    input.name === 'accountHolderName' ? 'Account Holder Name' : 'Branch Name';
                showFieldError(input, `${fieldName} can only contain letters and spaces`);
                return false;
            }
            clearFieldError(input);
            return true;
        }

        // Modified loadVendors function to include approval status filter
        function loadVendors() {
            debugger
            const searchTerm = document.getElementById('searchInput').value;
            const statusFilter = document.getElementById('statusFilter').value;
            const approvalStatusFilter = document.getElementById('approvalStatusFilter')?.value || '';

            console.log('Loading owners with filters:', {
                searchTerm,
                statusFilter,
                approvalStatusFilter,
                currentPage,
                pageSize,
                isChecker
            });

            const params = new URLSearchParams({
                searchTerm: searchTerm,
                statusFilter: statusFilter,
                approvalStatusFilter: approvalStatusFilter,
                page: currentPage,
                pageSize: pageSize
            });

            // Show loading indicator
            const tbody = document.getElementById('vendorTableBody');
            const colspan = isChecker ? 10 : 8;
            tbody.innerHTML = `<tr><td colspan="${colspan}" class="text-center py-4"><i class="ri-loader-line animate-spin"></i> Loading owners...</td></tr>`;

            fetch(`@Url.Action("GetVendors")?${params}`)
                .then(response => {
                    console.log('GetVendors response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(result => {
                    console.log('GetVendors server response:', result);

                    if (result.success) {
                        console.log('Received owners data:', result.data);
                        updateTable(result.data);
                        updatePagination(result.pagination);

                        // Clear any existing loading indicators
                        const loadingRows = tbody.querySelectorAll('tr td[colspan]');
                        loadingRows.forEach(row => row.parentElement.remove());

                        console.log('Table updated successfully with', result.data.length, 'vendors');

                        // Verify the table content
                        const tableRows = tbody.querySelectorAll('tr');
                        console.log('Table now has', tableRows.length, 'rows');
                    } else {
                        console.error('GetVendors failed:', result);
                        showAlert('error', result.message || 'Failed to load Owners');
                        tbody.innerHTML = `<tr><td colspan="${colspan}" class="text-center py-4 text-red-500">Failed to load Owners</td></tr>`;
                    }
                })
                .catch(error => {
                    console.error('Error loading owners:', error);
                    showAlert('error', 'An error occurred while loading Owners: ' + error.message);
                    tbody.innerHTML = `<tr><td colspan="${colspan}" class="text-center py-4 text-red-500">Error loading Owners</td></tr>`;
                });
        }

        // Modified updateTable function to handle approval workflow
        // Modified updateTable function - replace the action buttons section
        function updateTable(vendors) {
            const tbody = document.getElementById('vendorTableBody');
            tbody.innerHTML = '';

            console.log('Updating table with Owners:', vendors);

            if (!vendors || vendors.length === 0) {
                const colspan = isChecker ? 10 : 8; // Adjust colspan based on role
                tbody.innerHTML = `<tr><td colspan="${colspan}" class="text-center py-4 text-gray-500">No Owners found</td></tr>`;
                return;
            }

            vendors.forEach(vendor => {
                let approvalStatusCell = '';
                let makerCell = '';
                let actionButtons = '';

                if (isChecker) {
                    // Approval status column
                    let statusClass = '';
                    let statusText = '';

                    switch (vendor.approvalStatus) {
                        case 1:
                            statusClass = 'status-pending';
                            statusText = 'Pending';
                            break;
                        case 2:
                            statusClass = 'status-approved';
                            statusText = 'Approved';
                            break;
                        case 3:
                            statusClass = 'status-rejected';
                            statusText = 'Rejected';
                            break;
                        default:
                            statusClass = 'status-pending';
                            statusText = 'Unknown';
                    }

                    approvalStatusCell = `
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="status-badge ${statusClass}">${statusText}</span>
                        </td>`;

                    makerCell = `
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${vendor.makerUserName || '-'}</td>`;

                    // Action buttons for checkers
                    if (vendor.approvalStatus === 1) { // Pending
                        actionButtons = `
                            <button onclick="viewVendor(${vendor.id})" class="text-primary hover:text-primary/80 mr-2" title="View">
                                <i class="ri-eye-line"></i>
                            </button>
                            <button onclick="approveVendor(${vendor.id})" class="text-green-600 hover:text-green-800 mr-2" title="Approve">
                                <i class="ri-check-line"></i>
                            </button>
                            <button onclick="openRejectModal(${vendor.id}, '${vendor.vendorName}')" class="text-red-600 hover:text-red-700" title="Reject">
                                <i class="ri-close-line"></i>
                            </button>`;
                    } else {
                        actionButtons = `
                            <button onclick="viewVendor(${vendor.id})" class="text-primary hover:text-primary/80 mr-2" title="View">
                                <i class="ri-eye-line"></i>
                            </button>`;

                        // // Add edit/delete for approved vendors
                        // if (vendor.approvalStatus === 2) {
                        //     actionButtons += `
                        //         <button onclick="editVendor(${vendor.id})" class="text-green-600 hover:text-green-800 mr-2" title="Edit">
                        //             <i class="ri-edit-line"></i>
                        //         </button>
                        //         <button onclick="confirmDeleteVendor(${vendor.id}, '${vendor.vendorName}')" class="text-red-600 hover:text-red-700" title="Delete">
                        //             <i class="ri-delete-bin-line"></i>
                        //         </button>`;
                        // }
                    }
                } else {
                    // Action buttons for makers - Modified logic
                    if (vendor.approvalStatus === 1) { // Pending - Only show view button
                        actionButtons = `
                            <button onclick="viewVendor(${vendor.id})" class="text-primary hover:text-primary/80" title="View">
                                <i class="ri-eye-line"></i>
                            </button>`;
                    } else if (vendor.approvalStatus === 2) { // Approved - Show all buttons
                        actionButtons = `
                            <button onclick="viewVendor(${vendor.id})" class="text-primary hover:text-primary/80 mr-2" title="View">
                                <i class="ri-eye-line"></i>
                            </button>
                            <button onclick="editVendor(${vendor.id})" class="text-green-600 hover:text-green-800 mr-2" title="Edit">
                                <i class="ri-edit-line"></i>
                            </button>
                            <button onclick="confirmDeleteVendor(${vendor.id}, '${vendor.vendorName}')" class="text-red-600 hover:text-red-700" title="Delete">
                                <i class="ri-delete-bin-line"></i>
                            </button>`;
                    } else { // Rejected - Only show view button
                        actionButtons = `
                            <button onclick="viewVendor(${vendor.id})" class="text-primary hover:text-primary/80" title="View">
                                <i class="ri-eye-line"></i>
                            </button>`;
                    }
                }

                const row = `
                    <tr class="table-row hover:bg-gray-50">
                        <td class="px-4 py-4 text-center">
                            <input type="checkbox" class="vendor-checkbox">
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${vendor.vendorCode || ''}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${vendor.vendorName || ''}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${vendor.mobileNumber || ''}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${vendor.ifscCode || vendor.iFSCCode || ''}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${vendor.bankName || ''}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="status-badge ${vendor.status === 'Active' ? 'status-active' : 'status-inactive'}">
                                ${vendor.status || 'Unknown'}
                            </span>
                        </td>
                        ${approvalStatusCell}
                        ${makerCell}
                        <td class="px-6 py-4 whitespace-nowrap text-center">
                            <div class="flex gap-1 justify-center">
                                ${actionButtons}
                            </div>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });

            console.log('Table updated successfully with', vendors.length, 'rows');
        }
        function updateTable1(vendors) {
            const tbody = document.getElementById('vendorTableBody');
            tbody.innerHTML = '';

            console.log('Updating table with Owners:', vendors);

            if (!vendors || vendors.length === 0) {
                const colspan = isChecker ? 10 : 8; // Adjust colspan based on role
                tbody.innerHTML = `<tr><td colspan="${colspan}" class="text-center py-4 text-gray-500">No Owners found</td></tr>`;
                return;
            }

            vendors.forEach(vendor => {
                let approvalStatusCell = '';
                let makerCell = '';
                let actionButtons = '';

                if (isChecker) {
                    // Approval status column
                    let statusClass = '';
                    let statusText = '';

                    switch (vendor.approvalStatus) {
                        case 1:
                            statusClass = 'status-pending';
                            statusText = 'Pending';
                            break;
                        case 2:
                            statusClass = 'status-approved';
                            statusText = 'Approved';
                            break;
                        case 3:
                            statusClass = 'status-rejected';
                            statusText = 'Rejected';
                            break;
                        default:
                            statusClass = 'status-pending';
                            statusText = 'Unknown';
                    }

                    approvalStatusCell = `
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="status-badge ${statusClass}">${statusText}</span>
                                        </td>`;

                    makerCell = `
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${vendor.makerUserName || '-'}</td>`;

                    // Action buttons for checkers
                    if (vendor.approvalStatus === 1) { // Pending
                        actionButtons = `
                                            <button onclick="viewVendor(${vendor.id})" class="text-primary hover:text-primary/80 mr-2" title="View">
                                                <i class="ri-eye-line"></i>
                                            </button>
                                            <button onclick="approveVendor(${vendor.id})" class="text-green-600 hover:text-green-800 mr-2" title="Approve">
                                                <i class="ri-check-line"></i>
                                            </button>
                                            <button onclick="openRejectModal(${vendor.id}, '${vendor.vendorName}')" class="text-red-600 hover:text-red-700" title="Reject">
                                                <i class="ri-close-line"></i>
                                            </button>`;
                    } else {
                        actionButtons = `
                                            <button onclick="viewVendor(${vendor.id})" class="text-primary hover:text-primary/80 mr-2" title="View">
                                                <i class="ri-eye-line"></i>
                                            </button>`;

                        // Add edit/delete for approved vendors
                        if (vendor.approvalStatus === 2) {
                            actionButtons += `
                                                <button onclick="editVendor(${vendor.id})" class="text-green-600 hover:text-green-800 mr-2" title="Edit">
                                                    <i class="ri-edit-line"></i>
                                                </button>
                                                <button onclick="confirmDeleteVendor(${vendor.id}, '${vendor.vendorName}')" class="text-red-600 hover:text-red-700" title="Delete">
                                                    <i class="ri-delete-bin-line"></i>
                                                </button>`;
                        }
                    }
                } else {
                    // Action buttons for makers (only for approved vendors)
                    if (vendor.approvalStatus === 2) {
                        actionButtons = `
                                            <button onclick="viewVendor(${vendor.id})" class="text-primary hover:text-primary/80 mr-2" title="View">
                                                <i class="ri-eye-line"></i>
                                            </button>
                                            <button onclick="editVendor(${vendor.id})" class="text-green-600 hover:text-green-800 mr-2" title="Edit">
                                                <i class="ri-edit-line"></i>
                                            </button>
                                            <button onclick="confirmDeleteVendor(${vendor.id}, '${vendor.vendorName}')" class="text-red-600 hover:text-red-700" title="Delete">
                                                <i class="ri-delete-bin-line"></i>
                                            </button>`;
                    } else {
                        actionButtons = `
                                            <button onclick="viewVendor(${vendor.id})" class="text-primary hover:text-primary/80" title="View">
                                                <i class="ri-eye-line"></i>
                                            </button>`;
                    }
                }

                const row = `
                                    <tr class="table-row hover:bg-gray-50">
                                        <td class="px-4 py-4 text-center">
                                            <input type="checkbox" class="vendor-checkbox">
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${vendor.vendorCode || ''}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${vendor.vendorName || ''}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${vendor.mobileNumber || ''}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${vendor.ifscCode || vendor.iFSCCode || ''}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${vendor.bankName || ''}</td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="status-badge ${vendor.status === 'Active' ? 'status-active' : 'status-inactive'}">
                                                ${vendor.status || 'Unknown'}
                                            </span>
                                        </td>
                                        ${approvalStatusCell}
                                        ${makerCell}
                                        <td class="px-6 py-4 whitespace-nowrap text-center">
                                            <div class="flex gap-1 justify-center">
                                                ${actionButtons}
                                            </div>
                                        </td>
                                    </tr>
                                `;
                tbody.innerHTML += row;
            });

            console.log('Table updated successfully with', vendors.length, 'rows');
        }

        // Add CSS for approval status badges
        const style = document.createElement('style');
        style.textContent = `
                            .status-pending {
                                background-color: #fef3c7;
                                color: #92400e;
                            }
                            .status-approved {
                                background-color: #d1fae5;
                                color: #065f46;
                            }
                            .status-rejected {
                                background-color: #fee2e2;
                                color: #991b1b;
                            }
                        `;
        document.head.appendChild(style);

        // Event listeners
        function initializeEventListeners() {
            // Search functionality
            document.getElementById('searchInput').addEventListener('keypress', function (e) {
                if (e.key === 'Enter') {
                    searchVendors();
                }
            });

            // Select all checkbox
            document.getElementById('selectAll').addEventListener('change', function () {
                const checkboxes = document.querySelectorAll('.vendor-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
            });
        }

        // Form validation
        function initializeValidation() {
            // PAN Number validation
            document.querySelectorAll('input[name="panNumber"]').forEach(input => {
                input.addEventListener('input', function () {
                    this.value = this.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
                    clearFieldError(this);
                });
                input.addEventListener('blur', function () {
                    validatePANNumber(this);
                });
            });

            // Mobile number validation
            document.querySelectorAll('input[name="mobileNumber"], input[name="alternateNumber"]').forEach(input => {
                input.addEventListener('input', function () {
                    this.value = this.value.replace(/[^0-9]/g, '');
                    clearFieldError(this);
                });
                input.addEventListener('blur', function () {
                    if (this.name === 'mobileNumber' || (this.name === 'alternateNumber' && this.value.length > 0)) {
                        validateMobileNumber(this);
                    }
                });
            });

            // IFSC Code validation
            // document.querySelectorAll('input[name="ifscCode"]').forEach(input => {
            //     input.addEventListener('input', function () {
            //         this.value = this.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
            //         clearFieldError(this);
            //     });
            //     input.addEventListener('blur', function () {
            //         validateIFSCCode(this);
            //     });
            // });
            // IFSC Code validation - replace existing IFSC validation
            document.querySelectorAll('input[name="ifscCode"]').forEach(input => {
                input.addEventListener('input', function () {
                    // Convert to uppercase and allow only alphanumeric characters
                    let value = this.value.toUpperCase().replace(/[^A-Z0-9]/g, '');

                    // Ensure 5th character is 0 if length >= 5
                    if (value.length >= 5 && value.charAt(4) !== '0') {
                        value = value.substring(0, 4) + '0' + value.substring(5);
                    }

                    // Limit to 11 characters
                    this.value = value.substring(0, 11);
                    clearFieldError(this);
                });

                input.addEventListener('blur', function () {
                    validateIFSCCode(this);
                });
            });
            // Account Number validation
            document.querySelectorAll('input[name="accountNumber"]').forEach(input => {
                input.addEventListener('input', function () {
                    this.value = this.value.replace(/[^A-Z0-9]/gi, '');
                    clearFieldError(this);
                });
            });

            // Email validation
            document.querySelectorAll('input[name="emailId"]').forEach(input => {
                input.addEventListener('blur', function () {
                    validateEmail(this);
                });
                input.addEventListener('input', function () {
                    clearFieldError(this);
                });
            });
            // Bank field validation (only letters and spaces)
            document.querySelectorAll('input[name="bankName"], input[name="accountHolderName"], input[name="branchName"]').forEach(input => {
                input.addEventListener('input', function () {
                    // Remove numbers and special characters as user types
                    this.value = this.value.replace(/[^a-zA-Z\s]/g, '');
                    clearFieldError(this);
                });
                input.addEventListener('blur', function () {
                    validateBankFields(this);
                });
            });
            // Validate bank fields
            form.querySelectorAll('input[name="bankName"], input[name="accountHolderName"], input[name="branchName"]').forEach(input => {
                if (!validateBankFields(input)) {
                    isValid = false;
                }
            });
            // Required field validation
            document.querySelectorAll('input[required], textarea[required]').forEach(input => {
                input.addEventListener('blur', function () {
                    validateRequired(this);
                });
                input.addEventListener('input', function () {
                    clearFieldError(this);
                });
            });
        }

        // Validation functions
        function validatePANNumber(input) {
            const panPattern = /^[A-Z]{5}[0-9]{4}[A-Z]{1}$/;
            if (input.value && !panPattern.test(input.value)) {
                showFieldError(input, 'Invalid PAN Number format (e.g., ABCDE1234F)');
                return false;
            } else if (input.value && input.value.length !== 10) {
                showFieldError(input, 'PAN Number must be 10 characters');
                return false;
            }
            clearFieldError(input);
            return true;
        }

        function validateMobileNumber(input) {
            const mobilePattern = /^[0-9]{10}$/;
            if (input.value && !mobilePattern.test(input.value)) {
                const fieldName = input.name === 'mobileNumber' ? 'Mobile Number' : 'Alternate Number';
                showFieldError(input, `${fieldName} must be 10 digits`);
                return false;
            }
            clearFieldError(input);
            return true;
        }
        1
        function validateIFSCCode1(input) {
            const ifscPattern = /^[A-Z]{4}[0-9]{7}$/;
            if (input.value && !ifscPattern.test(input.value)) {
                showFieldError(input, 'Invalid IFSC Code format (e.g., SBIN0001234)');
                return false;
            } else if (input.value && input.value.length !== 11) {
                showFieldError(input, 'IFSC Code must be 11 characters');
                return false;
            }
            clearFieldError(input);
            return true;
        }

        function validateEmail(input) {
            const emailPattern = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
            if (input.value && !emailPattern.test(input.value)) {
                showFieldError(input, 'Invalid email format');
                return false;
            }
            clearFieldError(input);
            return true;
        }

        function validateRequired(input) {
            if (input.hasAttribute('required') && !input.value.trim()) {
                const label = input.closest('div').querySelector('label').textContent.replace('*', '').trim();
                showFieldError(input, `${label} is required`);
                return false;
            }
            clearFieldError(input);
            return true;
        }

        function showFieldError(input, message) {
            const errorDiv = input.parentNode.querySelector(`[data-field="${input.name}"]`);
            if (errorDiv) {
                errorDiv.textContent = message;
                errorDiv.classList.remove('hidden');
                input.classList.add('error-input');
            }
        }

        function clearFieldError(input) {
            const errorDiv = input.parentNode.querySelector(`[data-field="${input.name}"]`);
            if (errorDiv) {
                errorDiv.classList.add('hidden');
                input.classList.remove('error-input');
            }
        }

        function clearAllErrors(formId) {
            const form = document.getElementById(formId);
            form.querySelectorAll('.error-text').forEach(errorDiv => {
                errorDiv.classList.add('hidden');
            });
            form.querySelectorAll('.error-input').forEach(input => {
                input.classList.remove('error-input');
            });
        }

        function validateForm(formId) {
            debugger
            const form = document.getElementById(formId);
            let isValid = true;

            // // Validate all required fields
            // form.querySelectorAll('input[required], textarea[required]').forEach(input => {
            //     if (!validateRequired(input)) {
            //         isValid = false;
            //     }
            // });

            // Validate specific field formats
            form.querySelectorAll('input[name="panNumber"]').forEach(input => {
                if (!validatePANNumber(input)) {
                    isValid = false;
                }
            });

            form.querySelectorAll('input[name="mobileNumber"], input[name="alternateNumber"]').forEach(input => {
                if (!validateMobileNumber(input)) {
                    isValid = false;
                }
            });

            // form.querySelectorAll('input[name="ifscCode"]').forEach(input => {
            //     if (!validateIFSCCode(input)) {
            //         isValid = false;
            //     }
            // });

            form.querySelectorAll('input[name="emailId"]').forEach(input => {
                if (!validateEmail(input)) {
                    isValid = false;
                }
            });

            return isValid;
        }

        function displayServerErrors(errors, formId) {
            clearAllErrors(formId);

            if (Array.isArray(errors)) {
                errors.forEach(error => {
                    // Try to map error to specific field
                    const form = document.getElementById(formId);
                    if (error.includes('PAN Number')) {
                        const input = form.querySelector('input[name="panNumber"]');
                        if (input) showFieldError(input, error);
                    } else if (error.includes('Mobile Number')) {
                        const input = form.querySelector('input[name="mobileNumber"]');
                        if (input) showFieldError(input, error);
                    } else if (error.includes('Alternate Number')) {
                        const input = form.querySelector('input[name="alternateNumber"]');
                        if (input) showFieldError(input, error);
                    } else if (error.includes('IFSC Code')) {
                        const input = form.querySelector('input[name="ifscCode"]');
                        if (input) showFieldError(input, error);
                    } else if (error.includes('Property Address')) {
                        const input = form.querySelector('textarea[name="propertyAddress"]');
                        if (input) showFieldError(input, error);
                    } else if (error.includes('Email')) {
                        const input = form.querySelector('input[name="emailId"]');
                        if (input) showFieldError(input, error);
                    } else if (error.includes('Vendor Code')) {
                        const input = form.querySelector('input[name="vendorCode"]');
                        if (input) showFieldError(input, error);
                    } else if (error.includes('Vendor Name')) {
                        const input = form.querySelector('input[name="vendorName"]');
                        if (input) showFieldError(input, error);
                    } else if (error.includes('Address') && !error.includes('Property')) {
                        const input = form.querySelector('textarea[name="address"]');
                        if (input) showFieldError(input, error);

                    } else if (error.includes('Bank Name')) {
                        const input = form.querySelector('input[name="bankName"]');
                        if (input) showFieldError(input, error);
                    } else if (error.includes('Account Holder Name')) {
                        const input = form.querySelector('input[name="accountHolderName"]');
                        if (input) showFieldError(input, error);
                    } else if (error.includes('Branch Name')) {
                        const input = form.querySelector('input[name="branchName"]');
                        if (input) showFieldError(input, error);
                    
                    }
                });
            }
        }
        function validateIFSCCode(input) {
            // IFSC format: First 4 characters are alphabetic (bank code)
            // 5th character is always 0
            // Last 6 characters are numeric (branch code)
            const ifscPattern = /^[A-Z]{4}0[A-Z0-9]{6}$/;

            if (input.value && input.value.length !== 11) {
                showFieldError(input, 'IFSC Code must be exactly 11 characters');
                return false;
            } else if (input.value && !ifscPattern.test(input.value)) {
                showFieldError(input, 'Invalid IFSC Code format. Format: ABCD0123456 (4 letters + 0 + 6 alphanumeric)');
                return false;
            } else if (input.value && input.value.charAt(4) !== '0') {
                showFieldError(input, 'IFSC Code 5th character must be 0');
                return false;
            }
            clearFieldError(input);
            return true;
        }
        // Drawer functions
        function openCreateDrawer() {
            clearAllErrors('createVendorForm');
            const drawer = document.getElementById('createVendorDrawer');
            const panel = document.getElementById('createDrawerPanel');
            drawer.classList.remove('hidden');
            setTimeout(() => {
                panel.classList.remove('translate-x-full');
            }, 10);
            document.body.style.overflow = 'hidden';
        }

        function closeCreateDrawer() {
            const drawer = document.getElementById('createVendorDrawer');
            const panel = document.getElementById('createDrawerPanel');
            panel.classList.add('translate-x-full');
            setTimeout(() => {
                drawer.classList.add('hidden');
                document.body.style.overflow = 'auto';
                document.getElementById('createVendorForm').reset();
                clearAllErrors('createVendorForm');
            }, 300);
        }

        function openEditDrawer() {
            clearAllErrors('editVendorForm');
            const drawer = document.getElementById('editVendorDrawer');
            const panel = document.getElementById('editDrawerPanel');
            drawer.classList.remove('hidden');
            setTimeout(() => {
                panel.classList.remove('translate-x-full');
            }, 10);
            document.body.style.overflow = 'hidden';
        }

        function closeEditDrawer() {
            const drawer = document.getElementById('editVendorDrawer');
            const panel = document.getElementById('editDrawerPanel');
            panel.classList.add('translate-x-full');
            setTimeout(() => {
                drawer.classList.add('hidden');
                document.body.style.overflow = 'auto';
                document.getElementById('editVendorForm').reset();
                clearAllErrors('editVendorForm');
            }, 300);
        }

        function openViewDrawer() {
            const drawer = document.getElementById('viewVendorDrawer');
            const panel = document.getElementById('viewDrawerPanel');
            drawer.classList.remove('hidden');
            setTimeout(() => {
                panel.classList.remove('translate-x-full');
            }, 10);
            document.body.style.overflow = 'hidden';
        }

        function closeViewDrawer() {
            const drawer = document.getElementById('viewVendorDrawer');
            const panel = document.getElementById('viewDrawerPanel');
            panel.classList.add('translate-x-full');
            setTimeout(() => {
                drawer.classList.add('hidden');
                document.body.style.overflow = 'auto';
            }, 300);
        }

        // Modal functions
        function openDeleteModal() {
            document.getElementById('deleteModal').classList.remove('hidden');
            document.body.style.overflow = 'hidden';
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').classList.add('hidden');
            document.body.style.overflow = 'auto';
            currentVendorId = null;
        }

        // CRUD Operations
        function submitCreateForm() {
            if (!validateForm('createVendorForm')) {
                return;
            }

            const form = document.getElementById('createVendorForm');
            const formData = new FormData(form);

            // Get selected employees
            const selectedEmployees = Array.from(form.querySelectorAll('input[name="linkedEmployees"]:checked'))
                .map(cb => cb.value);

            const data = {
                vendorCode: formData.get('vendorCode'),
                vendorName: formData.get('vendorName'),
                pANNumber: formData.get('panNumber'),
                mobileNumber: formData.get('mobileNumber'),
                alternateNumber: formData.get('alternateNumber'),
                emailId: formData.get('emailId'),
                address: formData.get('address'),
                accountHolderName: formData.get('accountHolderName'),
                bankName: formData.get('bankName'),
                branchName: formData.get('branchName'),
                accountNumber: formData.get('accountNumber'),
                iFSCCode: formData.get('ifscCode'),
                propertyAddress: formData.get('propertyAddress'),
                totalRentAmount: parseFloat(formData.get('totalRentAmount')),
                linkedEmployees: selectedEmployees,
                status: formData.get('status')
            };

            fetch('@Url.Action("CreateVendor")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        showAlert('success', result.message);
                        closeCreateDrawer();
                        loadVendors();
                    } else {
                        if (result.errors && result.errors.length > 0) {
                            displayServerErrors(result.errors, 'createVendorForm');
                        } else {
                            showAlert('error', result.message);
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('error', 'An error occurred while creating the owner.');
                });
        }

        function editVendor(id) {
            fetch(`@Url.Action("GetVendorDetails")?id=${id}`)
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        const vendor = result.data;
                        const form = document.getElementById('editVendorForm');

                        // Populate form fields
                        form.querySelector('input[name="vendorId"]').value = vendor.id;
                        form.querySelector('input[name="vendorCode"]').value = vendor.vendorCode;
                        form.querySelector('input[name="vendorName"]').value = vendor.vendorName;
                        form.querySelector('input[name="panNumber"]').value = vendor.panNumber;
                        form.querySelector('input[name="mobileNumber"]').value = vendor.mobileNumber;
                        form.querySelector('input[name="alternateNumber"]').value = vendor.alternateNumber || '';
                        form.querySelector('input[name="emailId"]').value = vendor.emailId;
                        form.querySelector('textarea[name="address"]').value = vendor.address;
                        form.querySelector('input[name="accountHolderName"]').value = vendor.accountHolderName;
                        form.querySelector('input[name="bankName"]').value = vendor.bankName;
                        form.querySelector('input[name="branchName"]').value = vendor.branchName;
                        form.querySelector('input[name="accountNumber"]').value = vendor.accountNumber;
                        form.querySelector('input[name="ifscCode"]').value = vendor.ifscCode;
                        form.querySelector('textarea[name="propertyAddress"]').value = vendor.propertyAddress;
                        form.querySelector('input[name="totalRentAmount"]').value = vendor.totalRentAmount;
                        form.querySelector('select[name="status"]').value = vendor.status;

                        // Set linked employees
                        form.querySelectorAll('input[name="linkedEmployees"]').forEach(cb => {
                            cb.checked = vendor.linkedEmployees.includes(cb.value);
                        });

                        openEditDrawer();
                    } else {
                        showAlert('error', result.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('error', 'An error occurred while loading owner details.');
                });
        }

        function submitEditForm() {
            debugger
            if (!validateForm('editVendorForm')) {
                return;
            }

            const form = document.getElementById('editVendorForm');
            const formData = new FormData(form);

            // Get selected employees
            const selectedEmployees = Array.from(form.querySelectorAll('input[name="linkedEmployees"]:checked'))
                .map(cb => cb.value);

            const data = {
                id: parseInt(formData.get('vendorId')),
                vendorCode: formData.get('vendorCode'),
                vendorName: formData.get('vendorName'),
                pANNumber: formData.get('panNumber'),
                mobileNumber: formData.get('mobileNumber'),
                alternateNumber: formData.get('alternateNumber'),
                emailId: formData.get('emailId'),
                address: formData.get('address'),
                accountHolderName: formData.get('accountHolderName'),
                bankName: formData.get('bankName'),
                branchName: formData.get('branchName'),
                accountNumber: formData.get('accountNumber'),
                iFSCCode: formData.get('ifscCode'),
                propertyAddress: formData.get('propertyAddress'),
                totalRentAmount: parseFloat(formData.get('totalRentAmount')),
                linkedEmployees: selectedEmployees,
                status: formData.get('status')
            };

            fetch('@Url.Action("UpdateVendor")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify(data)
            })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        showAlert('success', result.message);
                        closeEditDrawer();
                        loadVendors();
                    } else {
                        if (result.errors && result.errors.length > 0) {
                            displayServerErrors(result.errors, 'editVendorForm');
                        } else {
                            showAlert('error', result.message);
                        }
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('error', 'An error occurred while updating the owner.');
                });
        }

        function viewVendor(id) {
            fetch(`@Url.Action("GetVendorDetails")?id=${id}`)
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        debugger
                        const vendor = result.data;
                        const linkedEmployees = vendor.LinkedEmployees && vendor.LinkedEmployees.length > 0
                            ? vendor.LinkedEmployees.join(', ')
                            : 'None';

                        document.getElementById('viewVendorDetails').innerHTML = `
                                    <div class="space-y-6">
                                        <div class="bg-gray-50 p-4 rounded-lg">
                                                    <h3 class="text-md font-semibold text-gray-900 mb-4">Owner Details</h3>
                                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                <div>
                                                            <label class="block text-sm font-medium text-gray-700">Owner Code</label>
                                                    <p class="text-sm text-gray-900">${vendor.vendorCode}</p>
                                                </div>
                                                <div>
                                                            <label class="block text-sm font-medium text-gray-700">Owner Name</label>
                                                    <p class="text-sm text-gray-900">${vendor.vendorName}</p>
                                                </div>
                                                <div>
                                                    <label class="block text-sm font-medium text-gray-700">PAN Number</label>
                                                    <p class="text-sm text-gray-900">${vendor.pANNumber}</p>
                                                </div>
                                                <div>
                                                    <label class="block text-sm font-medium text-gray-700">Mobile Number</label>
                                                    <p class="text-sm text-gray-900">${vendor.mobileNumber}</p>
                                                </div>
                                                <div>
                                                    <label class="block text-sm font-medium text-gray-700">Alternate Number</label>
                                                    <p class="text-sm text-gray-900">${vendor.alternateNumber || 'N/A'}</p>
                                                </div>
                                                <div>
                                                    <label class="block text-sm font-medium text-gray-700">Email ID</label>
                                                    <p class="text-sm text-gray-900">${vendor.emailId}</p>
                                                </div>
                                                <div class="md:col-span-2">
                                                    <label class="block text-sm font-medium text-gray-700">Address</label>
                                                    <p class="text-sm text-gray-900">${vendor.address}</p>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="bg-gray-50 p-4 rounded-lg">
                                            <h3 class="text-md font-semibold text-gray-900 mb-4">Bank Details</h3>
                                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                <div>
                                                    <label class="block text-sm font-medium text-gray-700">Account Holder Name</label>
                                                    <p class="text-sm text-gray-900">${vendor.accountHolderName}</p>
                                                </div>
                                                <div>
                                                    <label class="block text-sm font-medium text-gray-700">Bank Name</label>
                                                    <p class="text-sm text-gray-900">${vendor.bankName}</p>
                                                </div>
                                                <div>
                                                    <label class="block text-sm font-medium text-gray-700">Branch Name</label>
                                                    <p class="text-sm text-gray-900">${vendor.branchName}</p>
                                                </div>
                                                <div>
                                                    <label class="block text-sm font-medium text-gray-700">Account Number</label>
                                                    <p class="text-sm text-gray-900">${vendor.accountNumber}</p>
                                                </div>
                                                <div>
                                                    <label class="block text-sm font-medium text-gray-700">IFSC Code</label>
                                                            <p class="text-sm text-gray-900">${vendor.ifscCode}</p>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="bg-gray-50 p-4 rounded-lg">
                                            <h3 class="text-md font-semibold text-gray-900 mb-4">Property Details</h3>
                                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                                <div class="md:col-span-2">
                                                    <label class="block text-sm font-medium text-gray-700">Property Address</label>
                                                    <p class="text-sm text-gray-900">${vendor.propertyAddress}</p>
                                                </div>
                                                <div>
                                                    <label class="block text-sm font-medium text-gray-700">Total Rent Amount</label>
                                                    <p class="text-sm text-gray-900">₹${vendor.totalRentAmount}</p>
                                                </div>
                                                <div>
                                                    <label class="block text-sm font-medium text-gray-700">Status</label>
                                                    <span class="status-badge ${vendor.Status === 'Active' ? 'status-active' : 'status-inactive'}">${vendor.Status}</span>
                                                </div>
                                                <div class="md:col-span-2">
                                                    <label class="block text-sm font-medium text-gray-700">Linked Employees</label>
                                                    <p class="text-sm text-gray-900">${linkedEmployees}</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                `;
                        openViewDrawer();
                    } else {
                        showAlert('error', result.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('error', 'An error occurred while loading owner details.');
                });
        }

        function confirmDeleteVendor(id, name) {
            currentVendorId = id;
            document.getElementById('deleteVendorName').textContent = name;
            openDeleteModal();
        }

        function deleteVendor() {
            if (!currentVendorId) return;

            fetch('@Url.Action("DeleteVendor")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: `id=${currentVendorId}`
            })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        showAlert('success', result.message);
                        closeDeleteModal();
                        loadVendors();
                    } else {
                        showAlert('error', result.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('error', 'An error occurred while deleting the owner.');
                });
        }

        // Utility functions
        function searchVendors() {
            currentPage = 1;
            loadVendors();
        }

        function changePageSize() {
            pageSize = parseInt(document.getElementById('pageSize').value);
            currentPage = 1;
            loadVendors();
        }

        function loadVendors1() {
            const searchTerm = document.getElementById('searchInput').value;
            const statusFilter = document.getElementById('statusFilter').value;

            const params = new URLSearchParams({
                searchTerm: searchTerm,
                statusFilter: statusFilter,
                page: currentPage,
                pageSize: pageSize
            });

            fetch(`@Url.Action("GetVendors")?${params}`)
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        updateTable(result.data);
                        updatePagination(result.pagination);
                    } else {
                        showAlert('error', result.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('error', 'An error occurred while loading owners.');
                });
        }

        function updateTables(vendors) {
            const tbody = document.getElementById('vendorTableBody');
            tbody.innerHTML = '';

            vendors.forEach(vendor => {
                const row = `
                            <tr class="table-row">
                                <td class="px-4 py-4 text-center">
                                    <input type="checkbox" class="vendor-checkbox">
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${vendor.vendorCode}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${vendor.vendorName}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${vendor.mobileNumber}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${vendor.ifscCode}</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${vendor.bankName}</td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="status-badge ${vendor.Status === 'Active' ? 'status-active' : 'status-inactive'}">
                                        ${vendor.status}
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-center">
                                    <div class="flex gap-2 justify-center">
                                        <button onclick="viewVendor(${vendor.id})" class="text-primary hover:text-primary/80" title="View">
                                            <i class="ri-eye-line"></i>
                                        </button>
                                        <button onclick="editVendor(${vendor.id})" class="text-green-600 hover:text-green-800" title="Edit">
                                            <i class="ri-edit-line"></i>
                                        </button>
                                        <button onclick="confirmDeleteVendor(${vendor.id}, '${vendor.VendorName}')" class="text-red-600 hover:text-red-700" title="Delete">
                                            <i class="ri-delete-bin-line"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        `;
                tbody.innerHTML += row;
            });
        }

        function updatePagination(pagination) {
            const info = document.getElementById('paginationInfo');
            const buttons = document.getElementById('paginationButtons');

            const startRecord = (pagination.currentPage - 1) * pagination.pageSize + 1;
            const endRecord = Math.min(pagination.currentPage * pagination.pageSize, pagination.totalRecords);

            info.textContent = `Showing ${startRecord} to ${endRecord} of ${pagination.totalRecords} results`;

            let buttonsHtml = '';

            // Previous button
            if (pagination.CurrentPage > 1) {
                buttonsHtml += `<button onclick="goToPage(${pagination.CurrentPage - 1})" class="rounded px-3 py-1 text-sm text-gray-500 hover:text-gray-700">Previous</button>`;
            } else {
                buttonsHtml += `<span class="rounded px-3 py-1 text-sm text-gray-400">Previous</span>`;
            }

            // Page numbers
            for (let i = 1; i <= pagination.TotalPages; i++) {
                if (i === pagination.CurrentPage) {
                    buttonsHtml += `<span class="rounded px-3 py-1 text-sm bg-primary text-white">${i}</span>`;
                } else {
                    buttonsHtml += `<button onclick="goToPage(${i})" class="rounded px-3 py-1 text-sm text-gray-500 hover:text-gray-700">${i}</button>`;
                }
            }

            // Next button
            if (pagination.CurrentPage < pagination.TotalPages) {
                buttonsHtml += `<button onclick="goToPage(${pagination.CurrentPage + 1})" class="rounded px-3 py-1 text-sm text-gray-500 hover:text-gray-700">Next</button>`;
            } else {
                buttonsHtml += `<span class="rounded px-3 py-1 text-sm text-gray-400">Next</span>`;
            }

            buttons.innerHTML = buttonsHtml;
        }

        function goToPage(page) {
            currentPage = page;
            loadVendors();
        }

        function showAlert(type, message) {
            const container = document.getElementById('alertContainer');
            const alertClass = type === 'success' ? 'bg-green-100 border-green-400 text-green-700' : 'bg-red-100 border-red-400 text-red-700';

            container.innerHTML = `
                        <div class="${alertClass} px-4 py-3 rounded border" role="alert">
                            <span class="block sm:inline">${message}</span>
                        </div>
                    `;

            setTimeout(() => {
                container.innerHTML = '';
            }, 5000);
        }
    </script>
}
<style>
    .status-badge {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-size: 0.75rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .status-active {
        background-color: #d1fae5;
        color: #065f46;
    }

    .status-inactive {
        background-color: #fee2e2;
        color: #991b1b;
    }

    .status-pending {
        background-color: #fef3c7;
        color: #92400e;
    }

    .status-approved {
        background-color: #d1fae5;
        color: #065f46;
    }

    .status-rejected {
        background-color: #fee2e2;
        color: #991b1b;
    }

    .error-input {
        border-color: #ef4444;
        box-shadow: 0 0 0 1px #ef4444;
    }

    .error-text {
        color: #ef4444;
        font-size: 0.75rem;
        margin-top: 0.25rem;
    }

    .table-row:hover {
        background-color: #f9fafb;
    }


    .animate-spin {
        animation: spin 1s linear infinite;
    }

    /* Alert animations */
    .alert-enter {
        opacity: 0;
        transform: translateY(-10px);
        transition: all 0.3s ease-out;
    }

    .alert-enter-active {
        opacity: 1;
        transform: translateY(0);
    }
</style>