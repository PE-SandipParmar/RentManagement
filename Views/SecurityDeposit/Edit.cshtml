@model RentManagement.Models.SecurityDeposit

@{
    ViewData["Title"] = "Edit Security Deposit";
}
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<style>
    .select2-container--default .select2-selection--single {
        height: 42px;
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
        padding: 6px 12px;
    }

        .select2-container--default .select2-selection--single .select2-selection__rendered {
            color: #374151;
            line-height: 28px;
        }

        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: 40px;
        }

    .error-message {
        color: #dc2626;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .success-message {
        color: #16a34a;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .info-text {
        color: #6b7280;
        font-size: 0.75rem;
        margin-top: 0.25rem;
    }

    .validation-error {
        border-color: #dc2626 !important;
    }

    .validation-success {
        border-color: #16a34a !important;
    }
</style>
<div class="max-w-4xl mx-auto">
    <div class="bg-white shadow rounded-lg">
        <div class="px-6 py-4 border-b border-gray-200">
            <h1 class="text-2xl font-bold text-gray-900">Edit Security Deposit</h1>
        </div>

        <form asp-action="Edit" method="post" class="px-6 py-4 space-y-6">
            @Html.HiddenFor(m => m.Id)
            <div asp-validation-summary="ModelOnly" class="text-red-600"></div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label asp-for="EmployeeId" class="block text-sm font-medium text-gray-700 mb-1">Employee Name</label>
                    <select asp-for="EmployeeId" class="searchable-dropdown w-full px-3 py-2 border border-gray-300 rounded-md"
                            asp-items="@(new SelectList(ViewBag.Employees, "Id", "Name", Model.EmployeeId))">
                        <option value="0">Select</option>
                    </select>
                    <span asp-validation-for="EmployeeId" class="text-red-500 text-sm"></span>
                    <div id="employeeSalaryInfo" class="info-text" style="display: none;"></div>
                </div>
                <div>
                    <label asp-for="VendorId" class="block text-sm font-medium text-gray-700 mb-1">Owner Name</label>
                    <select asp-for="VendorId" class=" searchable-dropdown w-full px-3 py-2 border border-gray-300 rounded-md"
                            asp-items="@(new SelectList(ViewBag.Vendors, "Id", "Name", Model.VendorId))">
                        <option value="0">Select</option>
                    </select>
                    <span asp-validation-for="VendorId" class="text-red-500 text-sm"></span>
                    <div class="info-text">Owner will be auto-selected based on Employee and Lease</div>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label asp-for="LeaseId" class="block text-sm font-medium text-gray-700 mb-1">Lease Ref.</label>
                    <select asp-for="LeaseId" class="searchable-dropdown w-full px-3 py-2 border border-gray-300 rounded-md"
                            asp-items="@(new SelectList(ViewBag.Leases, "Id", "Name", Model.LeaseId))">
                        <option value="0">Select</option>
                    </select>
                    <span asp-validation-for="LeaseId" class="text-red-500 text-sm"></span>
                    <div class="info-text">Please select Employee first</div>
                </div>
                <div>
                    <label asp-for="Amount" class="block font-medium text-gray-700 mb-1">Deposit Amount</label>
                    <input asp-for="Amount" class="w-full px-3 py-2 border border-gray-300 rounded-md" type="number" step="0.01" />
                    <span asp-validation-for="Amount" class="text-red-500 text-sm"></span>
                    <div id="amountValidation" class="info-text"></div>
                    <div id="maxAmountInfo" class="info-text" style="display: none;"></div>
                </div>
            </div>

            <!-- New TDS Fields Row -->
            <!-- TDS Fields Row -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label asp-for="TdsRate" class="block text-sm font-medium text-gray-700 mb-1">
                        TDS Applicable <span class="text-xs text-gray-500">(Optional)</span>
                    </label>
                    <select asp-for="TdsRate" id="tdsRateSelect" class="searchable-dropdown w-full px-3 py-2 border border-gray-300 rounded-md">
                        <option value="0" data-rate="0" selected="@(Model.TdsRate == null || Model.TdsRate == 0)">No TDS</option>
                        <option value="2" data-rate="2" selected="@(Model.TdsRate == 2)">TDS 2%</option>
                        <option value="10" data-rate="10" selected="@(Model.TdsRate == 10)">TDS 10%</option>
                        <option value="20" data-rate="20" selected="@(Model.TdsRate == 20)">TDS 20%</option>
                    </select>
                    <span asp-validation-for="TdsRate" class="text-red-500 text-sm"></span>
                    <div class="info-text">Select applicable TDS rate or leave as 'No TDS'</div>
                </div>
                <div>
                    <label asp-for="TdsAmount" class="block text-sm font-medium text-gray-700 mb-1">TDS Amount</label>
                    <input asp-for="TdsAmount" id="tdsAmountInput" class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50" type="number" step="0.01" readonly />
                    <span asp-validation-for="TdsAmount" class="text-red-500 text-sm"></span>
                    <div id="tdsCalculation" class="info-text">Auto-calculated based on Deposit Amount and TDS Rate</div>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label asp-for="ApprovalStatus" class="block font-medium text-gray-700 mb-1">Approval Status</label>
                    <select asp-for="ApprovalStatus" class="searchable-dropdown w-full px-3 py-2 border border-gray-300 rounded-md">
                        <option value="Pending">Pending</option>
                        <option value="Approved">Approved</option>
                        <option value="Rejected">Rejected</option>
                    </select>
                    <span asp-validation-for="ApprovalStatus" class="text-red-500 text-sm"></span>
                </div>
                <div>
                    <label asp-for="Remark" class="block text-sm font-medium text-gray-700 mb-1">Remark</label>
                    <textarea asp-for="Remark" rows="3"
                              class="w-full px-3 py-2 border border-gray-300 rounded-md resize-none"
                              placeholder="Enter any additional remarks..."></textarea>
                    <span asp-validation-for="Remark" class="text-red-500 text-sm"></span>
                </div>
            </div>

            <div class="flex justify-end space-x-3">
                <button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700">
                    Update
                </button>
                <a href="@Url.Action("Index")" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300">
                    Cancel
                </a>

            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script>
    $(document).ready(function () {
        // Initialize Select2
        $('.searchable-dropdown').select2({
            placeholder: "Select an option",
            allowClear: true,
            width: '100%'
        });

        let employeeSalary = 0;
        let maxSecurityDeposit = 0;

        // TDS Calculation function
        // function calculateTds() {
        //     const amount = parseFloat($('#Amount').val()) || 0;
        //     const tdsRate = parseFloat($('#TdsRate').val()) || 0;

        //     if (amount > 0 && tdsRate > 0) {
        //         const tdsAmount = (amount * tdsRate) / 100;
        //         $('#TdsAmount').val(tdsAmount.toFixed(2));
        //     } else {
        //         $('#TdsAmount').val('');
        //     }
        // }

        // Amount change - recalculate TDS
        $('#Amount').on('input blur', function () {
            validateAmount();
            calculateTds();
        });

        // TDS Rate change - recalculate TDS
        $('#TdsRate').on('input blur', function () {
            const rate = parseFloat($(this).val());

            // Validate TDS rate
            if (rate < 0 || rate > 100) {
                $(this).addClass('validation-error');
                $(this).siblings('.info-text').addClass('error-message').text('TDS rate must be between 0 and 100%');
            } else {
                $(this).removeClass('validation-error').addClass('validation-success');
                $(this).siblings('.info-text').removeClass('error-message').text('Enter TDS rate as percentage (0-100%)');
            }

            calculateTds();
        });

        // Employee selection change
        $('#EmployeeId').on('change', function () {
            const employeeId = $(this).val();

            if (employeeId) {
                // Enable lease dropdown
                $('#LeaseId').prop('disabled', false);

                // Fetch employee salary and leases
                fetchEmployeeData(employeeId);
                fetchEmployeeLeases(employeeId);

                // Reset vendor selection
                $('#VendorId').val('').trigger('change');
                $('#duplicateWarning').hide();
            } else {
                // Reset everything
                resetForm();
            }
        });

        // Lease selection change
        $('#LeaseId').on('change', function () {
            const leaseId = $(this).val();
            const employeeId = $('#EmployeeId').val();

            if (leaseId && employeeId) {
                // Auto-fetch owner based on lease
                fetchLeaseOwner(leaseId);

                // Check for duplicate records
                checkDuplicateRecord(employeeId, leaseId);
            } else {
                $('#VendorId').val('').trigger('change').prop('disabled', true);
                $('#duplicateWarning').hide();
            }
        });

        // Form submission validation
        $('form').on('submit', function (e) {
            if (!validateForm()) {
                e.preventDefault();
                return false;
            }
        });
        // TDS Calculation function
        function calculateTds() {
            const amount = parseFloat($('#Amount').val()) || 0;
            const selectedOption = $('#tdsRateSelect option:selected');
            const tdsRate = parseFloat(selectedOption.data('rate')) || 0;

            let tdsAmount = 0;
            if (amount > 0 && tdsRate > 0) {
                tdsAmount = (amount * tdsRate) / 100;
                $('#TdsAmount').val(tdsAmount.toFixed(2));
                $('#tdsAmountInput').val(tdsAmount.toFixed(2));

                $('#tdsCalculation').removeClass('error-message').addClass('success-message')
                    .text(`TDS: ₹${tdsAmount.toLocaleString()} (${tdsRate}% of ₹${amount.toLocaleString()})`);
            } else {
                $('#TdsAmount').val('0.00');
                $('#tdsCalculation').removeClass('error-message success-message')
                    .text('Auto-calculated based on Deposit Amount and TDS Rate');
            }
        }

        // TDS Rate change - recalculate TDS
        $('#tdsRateSelect').on('change', function () {
            const selectedOption = $(this).find('option:selected');
            const rate = parseFloat(selectedOption.data('rate')) || 0;

            // Visual feedback
            if (rate > 0) {
                $(this).removeClass('validation-error').addClass('validation-success');
            } else {
                $(this).removeClass('validation-error validation-success');
            }

            calculateTds();
        });

        // Functions
        function fetchEmployeeData(employeeId) {
            $.ajax({
                url: '@Url.Action("GetEmployeeSalary", "SecurityDeposit")',
                type: 'GET',
                data: { employeeId: employeeId },
                success: function (data) {
                    if (data.success) {
                        employeeSalary = data.salary;
                        maxSecurityDeposit = employeeSalary * 2;

                        $('#employeeSalaryInfo').show().html(
                            `Monthly Salary: ₹${employeeSalary.toLocaleString()}`
                        );

                        $('#maxAmountInfo').show().html(
                            `Maximum Security Deposit: ₹${maxSecurityDeposit.toLocaleString()} (2 × Monthly Salary)`
                        );

                        validateAmount();
                    }
                },
                error: function () {
                    showError('Error fetching employee salary information');
                }
            });
        }

        function fetchEmployeeLeases(employeeId) {
            $.ajax({
                url: '@Url.Action("GetEmployeeLeases", "SecurityDeposit")',
                type: 'GET',
                data: { employeeId: employeeId },
                success: function (data) {
                    const leaseSelect = $('#LeaseId');
                    leaseSelect.empty().append('<option value="">Select Lease</option>');

                    if (data && data.length > 0) {
                        $.each(data, function (i, lease) {
                            leaseSelect.append(`<option value="${lease.id}">${lease.name}</option>`);
                        });
                    } else {
                        leaseSelect.append('<option value="">No leases found for this employee</option>');
                    }
                },
                error: function () {
                    showError('Error fetching employee leases');
                }
            });
        }

        function fetchLeaseOwner(leaseId) {
            $.ajax({
                url: '@Url.Action("GetLeaseOwner", "SecurityDeposit")',
                type: 'GET',
                data: { leaseId: leaseId },
                success: function (data) {
                    if (data.success) {
                        $('#VendorId').val(data.ownerId).trigger('change').prop('disabled', false);
                    }
                },
                error: function () {
                    showError('Error fetching lease owner information');
                }
            });
        }

        function checkDuplicateRecord(employeeId, leaseId) {
            const vendorId = $('#VendorId').val();

            if (employeeId && leaseId && vendorId) {
                $.ajax({
                    url: '@Url.Action("CheckDuplicateRecord", "SecurityDeposit")',
                    type: 'GET',
                    data: {
                        employeeId: employeeId,
                        leaseId: leaseId,
                        vendorId: vendorId,
                        excludeId: $('#Id').val()  // For edit operations
                    },
                    success: function (data) {
                        if (data.isDuplicate) {
                            $('#duplicateWarning').show();
                            $('#duplicateMessage').text(
                                'A security deposit record already exists for this Employee + Lease + Owner combination.'
                            );
                            $('button[type="submit"]').prop('disabled', true);
                        } else {
                            $('#duplicateWarning').hide();
                            $('button[type="submit"]').prop('disabled', false);
                        }
                    },
                    error: function () {
                        console.error('Error checking duplicate records');
                    }
                });
            }
        }

        function validateAmount() {
            const amount = parseFloat($('#Amount').val()) || 0;
            const amountInput = $('#Amount');
            const validation = $('#amountValidation');

            // Clear previous validation
            amountInput.removeClass('validation-error validation-success');
            validation.removeClass('error-message success-message');

            if (amount <= 0) {
                amountInput.addClass('validation-error');
                validation.addClass('error-message').text('Amount must be greater than 0');
                return false;
            }

            if (maxSecurityDeposit > 0 && amount > maxSecurityDeposit) {
                amountInput.addClass('validation-error');
                validation.addClass('error-message').text(
                    `Amount cannot exceed ₹${maxSecurityDeposit.toLocaleString()} (2 × Monthly Salary)`
                );
                return false;
            }

            // Valid amount
            amountInput.addClass('validation-success');
            validation.addClass('success-message').text('Valid amount');
            return true;
        }

        function validateForm() {
            let isValid = true;

            // Required field validation
            const requiredFields = ['#EmployeeId', '#VendorId', '#LeaseId', '#Amount'];
            requiredFields.forEach(function (field) {
                if (!$(field).val()) {
                    $(field).addClass('validation-error');
                    isValid = false;
                } else {
                    $(field).removeClass('validation-error');
                }
            });

            // Amount validation
            if (!validateAmount()) {
                isValid = false;
            }

            // TDS Rate validation
            const tdsRate = parseFloat($('#TdsRate').val()) || 0;
            if (tdsRate < 0 || tdsRate > 100) {
                $('#TdsRate').addClass('validation-error');
                isValid = false;
            }

            // Check for duplicates
            if ($('#duplicateWarning').is(':visible')) {
                isValid = false;
            }

            return isValid;
        }

        function resetForm() {
            $('#LeaseId').prop('disabled', true).val('').trigger('change');
            $('#VendorId').prop('disabled', true).val('').trigger('change');
            $('#employeeSalaryInfo, #maxAmountInfo').hide();
            $('#duplicateWarning').hide();
            $('#Amount').val('').removeClass('validation-error validation-success');
            $('#TdsRate, #TdsAmount').val('').removeClass('validation-error validation-success');
            $('#amountValidation').text('').removeClass('error-message success-message');
            employeeSalary = 0;
            maxSecurityDeposit = 0;
        }

        function showError(message) {
            alert(message);
        }

        // Trigger validation on vendor change (for duplicate check)
        $('#VendorId').on('change', function () {
            const employeeId = $('#EmployeeId').val();
            const leaseId = $('#LeaseId').val();

            if (employeeId && leaseId && $(this).val()) {
                checkDuplicateRecord(employeeId, leaseId);
            }
        });

        // Initial TDS calculation if values exist
        calculateTds();
    });
</script>