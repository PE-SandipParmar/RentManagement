@model RentManagement.Models.EmployeeListViewModel
@{
    ViewData["Title"] = "Employee Management";
    var isChecker = Model.CurrentUserRole == RentManagement.Models.UserRole.Checker || Model.CurrentUserRole == RentManagement.Models.UserRole.Admin;
    var isMaker = Model.CurrentUserRole == RentManagement.Models.UserRole.Maker;
}

@Html.AntiForgeryToken()

<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/remixicon/4.6.0/remixicon.min.css" rel="stylesheet">

<style>
    .select2-container--default .select2-selection--single {
        height: 42px;
        border: 1px solid #d1d5db;
        border-radius: 0.375rem;
        padding: 6px 12px;
    }

    .select2-container--default .select2-selection--single .select2-selection__rendered {
        color: #374151;
        line-height: 28px;
    }

    .select2-container--default .select2-selection--single .select2-selection__arrow {
        height: 40px;
    }

    .toast-enter {
        transform: translateX(100%);
        opacity: 0;
    }

    .toast-enter-active {
        transform: translateX(0);
        opacity: 1;
        transition: transform 300ms ease-out, opacity 300ms ease-out;
    }

    .toast-exit {
        transform: translateX(0);
        opacity: 1;
    }

    .toast-exit-active {
        transform: translateX(100%);
        opacity: 0;
        transition: transform 300ms ease-in, opacity 300ms ease-in;
    }

    .input-error {
        border-color: #ef4444 !important;
        border-width: 2px !important;
    }

    .error-message {
        color: #ef4444;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .status-badge {
        display: inline-block;
        padding: 0.25rem 0.5rem;
        border-radius: 0.375rem;
        font-size: 0.75rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .status-active {
        background-color: #d1fae5;
        color: #065f46;
    }

    .status-inactive {
        background-color: #fee2e2;
        color: #991b1b;
    }

    .status-pending {
        background-color: #fef3c7;
        color: #92400e;
    }

    .status-approved {
        background-color: #d1fae5;
        color: #065f46;
    }

    .status-rejected {
        background-color: #fee2e2;
        color: #991b1b;
    }

    .table-row:hover {
        background-color: #f9fafb;
    }

    .animate-spin {
        animation: spin 1s linear infinite;
    }
</style>

<div class="p-1">
    <!-- Breadcrumb -->
    <nav class="flex mb-6" aria-label="Breadcrumb">
        <ol class="inline-flex items-center space-x-1 md:space-x-3">
            <li class="inline-flex items-center">
                <a href="@Url.Action("Index", "Home")" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-primary">
                    <i class="ri-home-line mr-2"></i>
                    Dashboard
                </a>
            </li>
            <li>
                <div class="flex items-center">
                    <i class="ri-arrow-right-s-line text-gray-400"></i>
                    <span class="ml-1 text-sm font-medium text-gray-500 md:ml-2">Employee Management</span>
                </div>
            </li>
        </ol>
    </nav>

    <!-- Success/Error Messages -->
    <div id="alertContainer" class="mb-4"></div>

    <!-- Page Header -->
    <div class="flex items-center justify-between mb-6">
        <div>
            <h2 class="text-2xl font-bold text-gray-900">Employee Management</h2>
            <p class="text-gray-600 mt-1">Manage your organization's employees and their information</p>
        </div>
        <button onclick="openCreateDrawer()" class="rounded bg-primary text-white px-4 py-2 text-sm hover:bg-primary/90 flex items-center">
            <i class="ri-add-line mr-2"></i>
            Add New Employee
        </button>
    </div>

    <!-- Pending Approvals Section (Checker Only) -->
    @if (isChecker && Model.PendingApprovals.Any())
    {
        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-yellow-800">Pending Approvals (@Model.PendingApprovals.Count)</h3>
                <button onclick="showAllPendingApprovals()" class="text-sm text-yellow-700 hover:text-yellow-900">View All</button>
            </div>
            <div class="space-y-3">
                @foreach (var employee in Model.PendingApprovals.Take(3))
                {
                    <div class="bg-white rounded border p-3 flex items-center justify-between">
                        <div class="flex-1">
                            <div class="flex items-center space-x-4">
                                <div>
                                    <span class="font-medium text-gray-900">@employee.Code</span>
                                    <span class="text-sm text-gray-500">(@employee.Name)</span>
                                </div>
                                <div class="text-sm text-gray-600">
                                    Action: <span class="font-medium">@employee.MakerAction</span>
                                </div>
                                <div class="text-sm text-gray-600">
                                    By: <span class="font-medium">@employee.MakerUserName</span>
                                </div>
                                <div class="text-sm text-gray-600">
                                    Amount: <span class="font-medium">₹@employee.Email</span>
                                </div>
                            </div>
                        </div>
                        <div class="flex space-x-2">
                            <button onclick="viewEmployee(@employee.Id)" class="text-sm bg-blue-100 text-blue-700 px-3 py-1 rounded hover:bg-blue-200">
                                View
                            </button>
                            <button onclick="approveEmployee(@employee.Id)" class="text-sm bg-green-100 text-green-700 px-3 py-1 rounded hover:bg-green-200">
                                Approve
                            </button>
                            <button onclick="openRejectModal(@employee.Id, '@employee.Name')" class="text-sm bg-red-100 text-red-700 px-3 py-1 rounded hover:bg-red-200">
                                Reject
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    <!-- Filters/Search -->
    <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-100 mb-6">
        <div class="flex flex-col md:flex-row gap-4">
            <!-- Search Bar -->
            <div class="flex-1">
                <div class="relative">
                    <i class="ri-search-line absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                    <input type="text" id="searchInput" placeholder="Search employees..."
                           value="@Model.SearchTerm"
                           class="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent">
                </div>
            </div>
            <!-- Status Filter -->
            <div class="relative">
                <select id="statusFilter" class="appearance-none bg-white border border-gray-200 rounded-lg px-4 py-2 pr-8 focus:ring-2 focus:ring-primary focus:border-transparent">
                    <option value="">All Status</option>
                    @if (Model.StatusFilter == "Active")
                    {
                        <option value="Active" selected>Active</option>
                    }
                    else
                    {
                        <option value="Active">Active</option>
                    }
                    @if (Model.StatusFilter == "Inactive")
                    {
                        <option value="Inactive" selected>Inactive</option>
                    }
                    else
                    {
                        <option value="Inactive">Inactive</option>
                    }
                </select>
                <i class="ri-arrow-down-s-line absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none"></i>
            </div>
            <!-- Approval Status Filter (Checker Only) -->
            @if (isChecker)
            {
                <div class="relative">
                      <select id="approvalStatusFilter" class="appearance-none bg-white border border-gray-200 rounded-lg px-4 py-2 pr-8 focus:ring-2 focus:ring-primary focus:border-transparent">
                        @if (Model.ApprovalStatusFilter == "Approved" || string.IsNullOrEmpty(Model.ApprovalStatusFilter))
                        {
                            <option value="Approved" selected>Approved</option>
                        }
                        else
                        {
                            <option value="Approved">Approved</option>
                        }
                        @if (Model.ApprovalStatusFilter == "Pending")
                        {
                            <option value="Pending" selected>Pending</option>
                        }
                        else
                        {
                            <option value="Pending">Pending</option>
                        }
                        @if (Model.ApprovalStatusFilter == "Rejected")
                        {
                            <option value="Rejected" selected>Rejected</option>
                        }
                        else
                        {
                            <option value="Rejected">Rejected</option>
                        }
                    </select>
                    <i class="ri-arrow-down-s-line absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none"></i>
                </div>
            }
            <button onclick="searchEmployees()" class="bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary/90">Search</button>
        </div>
    </div>

    <!-- Data Table -->
    <div class="flex justify-end items-center mb-2">
        <div class="flex items-center">
            <label for="pageSize" class="mr-2 text-sm text-gray-700">Rows per page:</label>
            <select id="pageSize" onchange="changePageSize()" class="border border-gray-300 rounded px-2 py-1 text-sm">
                <option value="5">5</option>
                <option value="10" selected>10</option>
                <option value="20">20</option>
                <option value="50">50</option>
            </select>
        </div>
    </div>

    <div class="bg-white rounded-lg shadow-sm border border-gray-100 overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            <input type="checkbox" id="selectAll">
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Code</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Department</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Designation</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total Salary</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        @if (isChecker)
                        {
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Approval</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Maker</th>
                        }
                        <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody id="employeeTableBody" class="bg-white divide-y divide-gray-200">
                    @foreach (var employee in Model.Employees)
                    {
                        <tr class="table-row">
                            <td class="px-4 py-4 text-center">
                                <input type="checkbox" class="employee-checkbox">
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@employee.Code</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@employee.Name</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@employee.DepartmentName</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@employee.DesignationName</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">₹@(employee.TotalSalary?.ToString("N2") ?? "0.00")</td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="status-badge @(employee.IsActive ? "status-active" : "status-inactive")">
                                    @(employee.IsActive ? "Active" : "Inactive")
                                </span>
                            </td>
                            @if (isChecker)
                            {
                                <td class="px-6 py-4 whitespace-nowrap">
                                    @if (employee.ApprovalStatus == RentManagement.Models.ApprovalStatus.Pending)
                                    {
                                        <span class="status-badge status-pending">Pending</span>
                                    }
                                    else if (employee.ApprovalStatus == RentManagement.Models.ApprovalStatus.Approved)
                                    {
                                        <span class="status-badge status-approved">Approved</span>
                                    }
                                    else if (employee.ApprovalStatus == RentManagement.Models.ApprovalStatus.Rejected)
                                    {
                                        <span class="status-badge status-rejected">Rejected</span>
                                    }
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@employee.MakerUserName</td>
                            }
                            <td class="px-6 py-4 whitespace-nowrap text-center">
                                <div class="flex gap-2 justify-center">
                                    <button onclick="(@employee.Id)" class="text-primary hover:text-primary/80" title="View">
                                        <i class="ri-eye-line"></i>
                                    </button>
                                    @if (employee.ApprovalStatus == RentManagement.Models.ApprovalStatus.Pending && isChecker)
                                    {
                                        <button onclick="approveEmployee(@employee.Id)" class="text-green-600 hover:text-green-800" title="Approve">
                                            <i class="ri-check-line"></i>
                                        </button>
                                        <button onclick="openRejectModal(@employee.Id, '@employee.Name')" class="text-red-600 hover:text-red-700" title="Reject">
                                            <i class="ri-close-line"></i>
                                        </button>
                                    }
                                    @if (employee.ApprovalStatus == RentManagement.Models.ApprovalStatus.Approved && (isMaker || Model.CurrentUserRole == RentManagement.Models.UserRole.Admin))
                                    {
                                        <button onclick="openEditDrawer(@employee.Id)" class="text-green-600 hover:text-green-800" title="Edit">
                                            <i class="ri-edit-line"></i>
                                        </button>
                                        <button onclick="confirmDeleteEmployee(@employee.Id, '@employee.Name')" class="text-red-600 hover:text-red-700" title="Delete">
                                            <i class="ri-delete-bin-line"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div id="pagination" class="bg-white px-6 py-3 border-t border-gray-200 flex items-center justify-between">
            <div class="flex items-center text-sm text-gray-700">
                <span id="paginationInfo">Showing @((Model.CurrentPage - 1) * Model.PageSize + 1) to @Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalRecords) of @Model.TotalRecords results</span>
            </div>
            <div class="flex items-center space-x-2" id="paginationButtons">
                <!-- Pagination buttons will be generated by JavaScript -->
            </div>
        </div>
    </div>
</div>

<!-- Reject Employee Modal -->
<div id="rejectModal" class="fixed inset-0 z-50 flex items-center justify-center hidden">
    <div class="fixed inset-0 bg-gray-500 bg-opacity-50" onclick="closeRejectModal()"></div>
    <div class="bg-white rounded-lg shadow-lg max-w-md w-full mx-4 relative">
        <div class="p-6">
            <div class="flex items-center mb-4">
                <div class="flex-shrink-0">
                    <i class="ri-error-warning-line text-red-400 text-2xl"></i>
                </div>
                <div class="ml-3">
                    <h3 class="text-lg font-medium text-gray-900">Reject Employee</h3>
                </div>
            </div>
            <div class="mb-4">
                <p class="text-sm text-gray-500 mb-3">Are you sure you want to reject <strong id="rejectEmployeeName"></strong>?</p>
                <textarea id="rejectionReason" placeholder="Please provide a reason for rejection..."
                          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent"
                          rows="3" required></textarea>
            </div>
            <div class="flex justify-end space-x-3">
                <button type="button" onclick="closeRejectModal()" class="px-4 py-2 text-sm text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg">
                    Cancel
                </button>
                <button type="button" onclick="rejectEmployee()" class="px-4 py-2 text-sm text-white bg-red-600 hover:bg-red-700 rounded-lg">
                    Reject
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Slide-over Drawer -->
<div id="formDrawer" class="fixed inset-0 overflow-hidden z-50 hidden">
    <div class="absolute inset-0">
        <div class="absolute inset-0 bg-black bg-opacity-50 transition-opacity duration-300" onclick="closeDrawer()"></div>
        <div class="fixed inset-y-0 right-0 pl-10 max-w-full flex">
            <div class="w-screen max-w-2xl transform transition ease-in-out duration-300">
                <div class="h-full flex flex-col bg-white shadow-xl">
                    <!-- Header -->
                    <div class="px-6 py-4 bg-blue-600 text-white">
                        <div class="flex items-center justify-between">
                            <h2 id="drawerTitle" class="text-xl font-semibold">Add Employee</h2>
                            <button onclick="closeDrawer()" class="text-white hover:text-gray-200">
                                <i class="ri-close-line text-2xl"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Form Content -->
                    <div class="flex-1 overflow-y-auto">
                        <form id="employeeForm" class="px-6 py-4 space-y-6">
                            <input type="hidden" id="employeeId" name="Id" />

                            <div id="validationSummary" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded"></div>

                            <!-- Basic Information -->
                            <div class="space-y-4">
                                <h3 class="text-lg font-medium text-gray-900">Basic Information</h3>

                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div hidden>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Code</label>
                                        <input type="text" id="code" name="Code" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" readonly placeholder="Code is Auto Generated" />
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Name <span class="text-red-500">*</span></label>
                                        <input type="text" id="name" name="Name" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Enter full name" />
                                        <div id="nameError" class="error-message hidden"></div>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Date of Birth <span class="text-red-500">*</span></label>
                                        <input type="date" id="dateOfBirth" name="DateOfBirth" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                                        <div id="dobError" class="error-message hidden"></div>
                                    </div>
                                </div>

                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Gender <span class="text-red-500">*</span></label>
                                        <select id="gender" name="Gender" class="searchable-dropdown w-full">
                                            <option value="">Select Gender</option>
                                            <option value="Male">Male</option>
                                            <option value="Female">Female</option>
                                            <option value="Other">Other</option>
                                        </select>
                                        <div id="genderError" class="error-message hidden"></div>
                                    </div>
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Email <span class="text-red-500">*</span></label>
                                    <input type="email" id="email" name="Email" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Enter email address" />
                                    <div id="emailError" class="error-message hidden"></div>
                                </div>

                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Aadhar Number <span class="text-red-500">*</span></label>
                                        <input type="text" id="aadhar" name="Aadhar" maxlength="12" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Enter 12-digit Aadhar number" />
                                        <div id="aadharError" class="error-message hidden"></div>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">PAN Number <span class="text-red-500">*</span></label>
                                        <input type="text" id="pan" name="Pan" maxlength="10" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 uppercase" placeholder="ABCDE1234F" />
                                        <div id="panError" class="error-message hidden"></div>
                                    </div>
                                </div>
                            </div>

                            <!-- Job Details -->
                            <div class="space-y-4">
                                <h3 class="text-lg font-medium text-gray-900">Job Details</h3>

                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Department <span class="text-red-500">*</span></label>
                                        <select id="departmentId" name="DepartmentId" class="searchable-dropdown w-full">
                                            <option value="">Select Department</option>
                                            @foreach (var dept in ViewBag.Departments as IEnumerable<dynamic>)
                                            {
                                                <option value="@dept.Id">@dept.Name</option>
                                            }
                                        </select>
                                        <div id="departmentError" class="error-message hidden"></div>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Designation <span class="text-red-500">*</span></label>
                                        <select id="designationId" name="DesignationId" class="searchable-dropdown w-full">
                                            <option value="">Select Designation</option>
                                            @foreach (var desig in ViewBag.Designations as IEnumerable<dynamic>)
                                            {
                                                <option value="@desig.Id">@desig.Name</option>
                                            }
                                        </select>
                                        <div id="designationError" class="error-message hidden"></div>
                                    </div>
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Date of Joining <span class="text-red-500">*</span></label>
                                    <input type="date" id="dateOfJoining" name="DateOfJoining" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                                    <div id="joiningDateError" class="error-message hidden"></div>
                                </div>

                                <div>
                                    <label class="inline-flex items-center">
                                        <input type="checkbox" id="eligibleForLease" name="EligibleForLease" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                        <span class="ml-2 text-sm text-gray-700">Eligible for Lease</span>
                                    </label>
                                </div>
                            </div>

                            <!-- Salary Details -->
                            <div class="space-y-4">
                                <h3 class="text-lg font-medium text-gray-900">Salary Details</h3>

                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Total Salary (₹) <span class="text-red-500">*</span></label>
                                        <input type="number" step="0.01" min="0" id="totalSalary" name="TotalSalary" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="0.00" />
                                        <div id="totalSalaryError" class="error-message hidden"></div>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Basic Salary (₹) <span class="text-red-500">*</span></label>
                                        <input type="number" step="0.01" min="0" id="basicSalary" name="BasicSalary" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="0.00" />
                                        <div id="basicSalaryError" class="error-message hidden"></div>
                                    </div>
                                </div>

                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">House Rent Allowance (₹)</label>
                                        <input type="number" step="0.01" min="0" id="houseRentAllowance" name="HouseRentAllowance" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="0.00" />
                                        <p class="text-xs text-gray-500 mt-1">Maximum allowed: (Basic Salary × 50%) × 2</p>
                                        <div id="houseRentAllowanceError" class="error-message hidden"></div>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Travel Allowance (₹)</label>
                                        <input type="number" step="0.01" min="0" id="travelAllowance" name="TravelAllowance" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="0.00" />
                                        <div id="travelAllowanceError" class="error-message hidden"></div>
                                    </div>
                                </div>

                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Medical Allowance (₹)</label>
                                        <input type="number" step="0.01" min="0" id="medicalAllowance" name="MedicalAllowance" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="0.00" />
                                        <div id="medicalAllowanceError" class="error-message hidden"></div>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">Other Allowance (₹)</label>
                                        <input type="number" step="0.01" min="0" id="otherAllowance" name="OtherAllowance" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="0.00" />
                                        <div id="otherAllowanceError" class="error-message hidden"></div>
                                    </div>
                                </div>

                                <!-- Deductions Section -->
                                <div class="pt-4 border-t border-gray-200">
                                    <h4 class="text-md font-medium text-gray-900 mb-4">Deductions</h4>

                                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">PF (₹)</label>
                                            <input type="number" step="0.01" min="0" id="pf" name="PF"
                                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                                   placeholder="0.00" />
                                            <div id="pfError" class="error-message hidden"></div>
                                        </div>

                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">Professional Tax (₹)</label>
                                            <input type="number" step="0.01" min="0" id="professionalTax" name="ProfessionalTax"
                                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                                   placeholder="0.00" />
                                            <div id="professionalTaxError" class="error-message hidden"></div>
                                        </div>

                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-1">ESI (₹)</label>
                                            <input type="number" step="0.01" min="0" id="esi" name="ESI"
                                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                                   placeholder="0.00" />
                                            <div id="esiError" class="error-message hidden"></div>
                                        </div>
                                    </div>
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Gross Salary After Deductions (₹)</label>
                                    <input type="number" step="0.01" id="grossSalaryAfterDeductions" name="GrossSalaryAfterDeductions" readonly class="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50" placeholder="0.00" />
                                    <p class="text-xs text-gray-500 mt-1">Total Salary - (PF + Professional Tax + ESI)</p>
                                    <div id="grossSalaryError" class="error-message hidden"></div>
                                </div>
                            </div>
                        </form>
                    </div>

                    <!-- Footer Actions -->
                    <div class="px-6 py-4 border-t border-gray-200 bg-gray-50">
                        <div class="flex justify-end space-x-3">
                            <button onclick="closeDrawer()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                                Cancel
                            </button>
                            <button onclick="saveEmployee()" id="saveButton" class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 flex items-center">
                                <span id="saveButtonText">Save Employee</span>
                                <div id="saveButtonSpinner" class="ml-2 hidden">
                                    <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                                </div>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Details Slide-over Drawer -->
<div id="detailsDrawer" class="fixed inset-0 overflow-hidden z-50 hidden">
    <div class="absolute inset-0">
        <div class="absolute inset-0 bg-black bg-opacity-50 transition-opacity duration-300" onclick="closeDetailsDrawer()"></div>
        <div class="fixed inset-y-0 right-0 pl-10 max-w-full flex">
            <div class="w-screen max-w-2xl transform transition ease-in-out duration-300">
                <div class="h-full flex flex-col bg-white shadow-xl">
                    <!-- Header -->
                    <div class="px-6 py-4 bg-gradient-to-r from-indigo-600 to-blue-500 text-white">
                        <div class="flex items-center justify-between">
                            <div>
                                <h2 class="text-xl font-semibold">Employee Details</h2>
                                <p class="text-indigo-100 text-sm">Complete information about this employee</p>
                            </div>
                            <button onclick="closeDetailsDrawer()" class="text-white hover:text-gray-200">
                                <i class="ri-close-line text-2xl"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Details Content -->
                    <div class="flex-1 overflow-y-auto px-6 py-6">
                        <dl id="employeeDetails" class="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-4">
                            <!-- Details will be populated by JavaScript -->
                        </dl>
                    </div>

                    <!-- Footer -->
                    <div class="px-6 py-4 border-t border-gray-200 bg-gray-50">
                        <div class="flex justify-end">
                            <button onclick="closeDetailsDrawer()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                                Close
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
        <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-semibold text-red-600">Delete Employee</h3>
        </div>
        <div class="px-6 py-4">
            <div class="flex items-center mb-4">
                <div class="flex-shrink-0">
                    <i class="ri-error-warning-line text-red-500 text-3xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm text-gray-700">
                        Are you sure you want to permanently delete <strong id="deleteEmployeeName"></strong>?
                        This action cannot be undone.
                    </p>
                </div>
            </div>
        </div>
        <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
            <button onclick="closeDeleteModal()" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                Cancel
            </button>
            <button onclick="deleteEmployee()" id="deleteButton" class="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 flex items-center">
                <span id="deleteButtonText">Delete</span>
                <div id="deleteButtonSpinner" class="ml-2 hidden">
                    <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                </div>
            </button>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

<script>
    // Global variables
    let currentMode = 'create';
    let currentEmployeeId = null;
    let deleteEmployeeId = null;
    let currentUserRole = '@Model.CurrentUserRole';
    let isChecker = @(isChecker ? "true" : "false");
    let currentPage = @Model.CurrentPage;
    let pageSize = @Model.PageSize;

    $(document).ready(function () {
        // Initialize Select2 dropdowns
        $('.searchable-dropdown').select2({
            placeholder: "Select an option",
            allowClear: true,
            width: '100%',
            dropdownParent: $('#formDrawer')
        });

        // Setup all validations and event listeners
        setupFormValidations();
        setupSalaryCalculation();
        setupDateValidations();
        setupValidationErrorClearing();
        initializeEventListeners();
        initializePagination();
    });

    // Approval workflow functions
    function approveEmployee(id) {
        if (!confirm('Are you sure you want to approve this employee?')) {
            return;
        }

        fetch('@Url.Action("ApproveEmployee")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
            },
            body: `id=${id}`
        })
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                showAlert('success', result.message);
                refreshTableAfterUpdate();
            } else {
                showAlert('error', result.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showAlert('error', 'An error occurred while approving the employee.');
        });
    }

    function openRejectModal(id, name) {
        currentEmployeeId = id;
        document.getElementById('rejectEmployeeName').textContent = name;
        document.getElementById('rejectionReason').value = '';
        document.getElementById('rejectModal').classList.remove('hidden');
        document.body.style.overflow = 'hidden';
    }

    function closeRejectModal() {
        document.getElementById('rejectModal').classList.add('hidden');
        document.body.style.overflow = 'auto';
        currentEmployeeId = null;
    }

    function rejectEmployee() {
        if (!currentEmployeeId) return;

        const rejectionReason = document.getElementById('rejectionReason').value.trim();
        if (!rejectionReason) {
            showAlert('error', 'Please provide a reason for rejection.');
            return;
        }

        const data = {
            id: currentEmployeeId,
            rejectionReason: rejectionReason
        };

        fetch('@Url.Action("RejectEmployee")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                showAlert('success', result.message);
                closeRejectModal();
                refreshTableAfterUpdate();
            } else {
                showAlert('error', result.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showAlert('error', 'An error occurred while rejecting the employee.');
        });
    }

    function refreshTableAfterUpdate() {
        // Reset to first page to ensure we see the changes
        currentPage = 1;
        loadEmployees();

        // If checker, also refresh the pending approvals section
        if (isChecker) {
            setTimeout(() => {
                location.reload(); // This will refresh the pending approvals section
            }, 1000);
        }
    }

    function searchEmployees() {
        currentPage = 1;
        loadEmployees();
    }

    function changePageSize() {
        pageSize = parseInt(document.getElementById('pageSize').value);
        currentPage = 1;
        loadEmployees();
    }

    function loadEmployees() {
        const searchTerm = document.getElementById('searchInput').value;
        const statusFilter = document.getElementById('statusFilter').value;
        const approvalStatusFilter = document.getElementById('approvalStatusFilter')?.value || '';

        console.log('Loading employees with filters:', {
            searchTerm,
            statusFilter,
            approvalStatusFilter,
            currentPage,
            pageSize,
            isChecker
        });

        const params = new URLSearchParams({
            searchTerm: searchTerm,
            statusFilter: statusFilter,
            approvalStatusFilter: approvalStatusFilter,
            page: currentPage,
            pageSize: pageSize
        });

        // Show loading indicator
        const tbody = document.getElementById('employeeTableBody');
        const colspan = isChecker ? 10 : 8;
        tbody.innerHTML = `<tr><td colspan="${colspan}" class="text-center py-4"><i class="ri-loader-line animate-spin"></i> Loading employees...</td></tr>`;

        fetch(`@Url.Action("GetEmployees")?${params}`)
            .then(response => {
                console.log('GetEmployees response status:', response.status);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(result => {
                console.log('GetEmployees server response:', result);

                if (result.success) {
                    console.log('Received employee data:', result.data);
                    updateTable(result.data);
                    updatePagination(result.pagination);

                    // Clear any existing loading indicators
                    const loadingRows = tbody.querySelectorAll('tr td[colspan]');
                    loadingRows.forEach(row => row.parentElement.remove());

                    console.log('Table updated successfully with', result.data.length, 'employees');

                    // Verify the table content
                    const tableRows = tbody.querySelectorAll('tr');
                    console.log('Table now has', tableRows.length, 'rows');
                } else {
                    console.error('GetEmployees failed:', result);
                    showAlert('error', result.message || 'Failed to load employees');
                    tbody.innerHTML = `<tr><td colspan="${colspan}" class="text-center py-4 text-red-500">Failed to load employees</td></tr>`;
                }
            })
            .catch(error => {
                console.error('Error loading employees:', error);
                showAlert('error', 'An error occurred while loading employees: ' + error.message);
                tbody.innerHTML = `<tr><td colspan="${colspan}" class="text-center py-4 text-red-500">Error loading employees</td></tr>`;
            });
    }

    function updateTable(employees) {
        const tbody = document.getElementById('employeeTableBody');
        tbody.innerHTML = '';

        console.log('Updating table with employees:', employees);

        if (!employees || employees.length === 0) {
            const colspan = isChecker ? 10 : 8; // Adjust colspan based on role
            tbody.innerHTML = `<tr><td colspan="${colspan}" class="text-center py-4 text-gray-500">No employees found</td></tr>`;
            return;
        }

        employees.forEach(employee => {
            let approvalStatusCell = '';
            let makerCell = '';
            let actionButtons = '';

            if (isChecker) {
                // Approval status column
                let statusClass = '';
                let statusText = '';

                switch (employee.approvalStatus) {
                    case 1:
                        statusClass = 'status-pending';
                        statusText = 'Pending';
                        break;
                    case 2:
                        statusClass = 'status-approved';
                        statusText = 'Approved';
                        break;
                    case 3:
                        statusClass = 'status-rejected';
                        statusText = 'Rejected';
                        break;
                    default:
                        statusClass = 'status-pending';
                        statusText = 'Unknown';
                }

                approvalStatusCell = `
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="status-badge ${statusClass}">${statusText}</span>
                    </td>`;

                makerCell = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${employee.makerUserName || '-'}</td>`;

                // Action buttons for checkers
                if (employee.approvalStatus === 1) { // Pending
                    actionButtons = `
                        <button onclick="viewEmployee(${employee.id})" class="text-primary hover:text-primary/80 mr-2" title="View">
                            <i class="ri-eye-line"></i>
                        </button>
                        <button onclick="approveEmployee(${employee.id})" class="text-green-600 hover:text-green-800 mr-2" title="Approve">
                            <i class="ri-check-line"></i>
                        </button>
                        <button onclick="openRejectModal(${employee.id}, '${employee.name}')" class="text-red-600 hover:text-red-700" title="Reject">
                            <i class="ri-close-line"></i>
                        </button>`;
                } else {
                    actionButtons = `
                        <button onclick="viewEmployee(${employee.id})" class="text-primary hover:text-primary/80 mr-2" title="View">
                            <i class="ri-eye-line"></i>
                        </button>`;

                    // Add edit/delete for approved employees
                    if (employee.approvalStatus === 2) {
                        actionButtons += `
                            <button onclick="openEditDrawer(${employee.id})" class="text-green-600 hover:text-green-800 mr-2" title="Edit">
                                <i class="ri-edit-line"></i>
                            </button>
                            <button onclick="confirmDeleteEmployee(${employee.id}, '${employee.name}')" class="text-red-600 hover:text-red-700" title="Delete">
                                <i class="ri-delete-bin-line"></i>
                            </button>`;
                    }
                }
            } else {
                // Action buttons for makers (only for approved employees)
                if (employee.approvalStatus === 2) {
                    actionButtons = `
                        <button onclick="viewEmployee(${employee.id})" class="text-primary hover:text-primary/80 mr-2" title="View">
                            <i class="ri-eye-line"></i>
                        </button>
                        <button onclick="openEditDrawer(${employee.id})" class="text-green-600 hover:text-green-800 mr-2" title="Edit">
                            <i class="ri-edit-line"></i>
                        </button>
                        <button onclick="confirmDeleteEmployee(${employee.id}, '${employee.name}')" class="text-red-600 hover:text-red-700" title="Delete">
                            <i class="ri-delete-bin-line"></i>
                        </button>`;
                } else {
                    actionButtons = `
                        <button onclick="viewEmployee(${employee.id})" class="text-primary hover:text-primary/80" title="View">
                            <i class="ri-eye-line"></i>
                        </button>`;
                }
            }

            const row = `
                <tr class="table-row hover:bg-gray-50">
                    <td class="px-4 py-4 text-center">
                        <input type="checkbox" class="employee-checkbox">
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${employee.code || ''}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${employee.name || ''}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${employee.departmentName || ''}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${employee.designationName || ''}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">₹${(employee.totalSalary || 0).toFixed(2)}</td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="status-badge ${employee.isActive ? 'status-active' : 'status-inactive'}">
                            ${employee.isActive ? 'Active' : 'Inactive'}
                        </span>
                    </td>
                    ${approvalStatusCell}
                    ${makerCell}
                    <td class="px-6 py-4 whitespace-nowrap text-center">
                        <div class="flex gap-1 justify-center">
                            ${actionButtons}
                        </div>
                    </td>
                </tr>
            `;
            tbody.innerHTML += row;
        });

        console.log('Table updated successfully with', employees.length, 'rows');
    }

    function initializeEventListeners() {
        // Search functionality
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchEmployees();
            }
        });

        // Select all checkbox
        document.getElementById('selectAll').addEventListener('change', function() {
            const checkboxes = document.querySelectorAll('.employee-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });
        });
    }

    function initializePagination() {
        generatePaginationButtons();
    }

    function updatePagination(pagination) {
        const info = document.getElementById('paginationInfo');
        const buttons = document.getElementById('paginationButtons');
        
        const startRecord = (pagination.currentPage - 1) * pagination.pageSize + 1;
        const endRecord = Math.min(pagination.currentPage * pagination.pageSize, pagination.totalRecords);
        
        info.textContent = `Showing ${startRecord} to ${endRecord} of ${pagination.totalRecords} results`;
        
        let buttonsHtml = '';
        
        // Previous button
        if (pagination.currentPage > 1) {
            buttonsHtml += `<button onclick="goToPage(${pagination.currentPage - 1})" class="rounded px-3 py-1 text-sm text-gray-500 hover:text-gray-700">Previous</button>`;
        } else {
            buttonsHtml += `<span class="rounded px-3 py-1 text-sm text-gray-400">Previous</span>`;
        }
        
        // Page numbers
        for (let i = 1; i <= pagination.totalPages; i++) {
            if (i === pagination.currentPage) {
                buttonsHtml += `<span class="rounded px-3 py-1 text-sm bg-primary text-white">${i}</span>`;
            } else {
                buttonsHtml += `<button onclick="goToPage(${i})" class="rounded px-3 py-1 text-sm text-gray-500 hover:text-gray-700">${i}</button>`;
            }
        }
        
        // Next button
        if (pagination.currentPage < pagination.totalPages) {
            buttonsHtml += `<button onclick="goToPage(${pagination.currentPage + 1})" class="rounded px-3 py-1 text-sm text-gray-500 hover:text-gray-700">Next</button>`;
        } else {
            buttonsHtml += `<span class="rounded px-3 py-1 text-sm text-gray-400">Next</span>`;
        }
        
        buttons.innerHTML = buttonsHtml;
    }

    function generatePaginationButtons() {
        // Initial pagination setup
        updatePagination({
            currentPage: currentPage,
            pageSize: pageSize,
            totalRecords: @Model.TotalRecords,
            totalPages: @Model.TotalPages
        });
    }

    function goToPage(page) {
        currentPage = page;
        loadEmployees();
    }

    // Rest of the functions (setupFormValidations, setupSalaryCalculation, etc.) remain the same as before...
    // [Previous JavaScript functions for form validation, CRUD operations, etc.]

    function setupFormValidations() {
        // Name validation - only alphabetic characters and spaces
        $('#name').on('input', function () {
            const value = this.value;
            const regex = /^[a-zA-Z\s]*$/;
            if (!regex.test(value)) {
                this.value = value.replace(/[^a-zA-Z\s]/g, '');
                showFieldError('name', 'Only alphabetic characters and spaces are allowed');
            } else {
                clearFieldError('name');
            }
        });

        // Aadhar validation - only 12 digits
        $('#aadhar').on('input', function () {
            let value = this.value.replace(/\D/g, ''); // Remove non-digits
            if (value.length > 12) {
                value = value.substring(0, 12);
            }
            this.value = value;

            if (value.length > 0 && value.length < 12) {
                showFieldError('aadhar', 'Aadhar number must be exactly 12 digits');
            } else if (value.length === 12) {
                clearFieldError('aadhar');
                validateAadharUniqueness(value);
            }
        });

        // Enhanced PAN validation - exact format validation
        $('#pan').on('input', function () {
            let value = this.value.toUpperCase();
            value = value.replace(/[^A-Z0-9]/g, '');

            let formattedValue = '';
            for (let i = 0; i < Math.min(value.length, 10); i++) {
                if (i < 5) {
                    if (/[A-Z]/.test(value[i])) {
                        formattedValue += value[i];
                    }
                } else if (i >= 5 && i < 9) {
                    if (/[0-9]/.test(value[i])) {
                        formattedValue += value[i];
                    }
                } else if (i === 9) {
                    if (/[A-Z]/.test(value[i])) {
                        formattedValue += value[i];
                    }
                }
            }

            this.value = formattedValue;

            if (formattedValue.length === 0) {
                clearFieldError('pan');
            } else if (formattedValue.length < 10) {
                showFieldError('pan', 'PAN must be exactly 10 characters (Format: ABCDE1234F)');
            } else if (formattedValue.length === 10) {
                const panRegex = /^[A-Z]{5}[0-9]{4}[A-Z]{1}$/;
                if (panRegex.test(formattedValue)) {
                    clearFieldError('pan');
                } else {
                    showFieldError('pan', 'Invalid PAN format. Must be: 5 letters + 4 digits + 1 letter');
                }
            }
        });

        // Salary field validations - prevent negative values
        const salaryFields = ['totalSalary', 'basicSalary', 'houseRentAllowance', 'travelAllowance', 'medicalAllowance', 'otherAllowance', 'pf', 'professionalTax', 'esi'];

        salaryFields.forEach(fieldId => {
            $(`#${fieldId}`).on('input', function () {
                let value = parseFloat(this.value);
                if (value < 0) {
                    this.value = '';
                    showFieldError(fieldId, 'Negative values are not allowed');
                } else {
                    clearFieldError(fieldId);
                }
            });
        });

        // Select2 clear button functionality
        $('#departmentId, #designationId, #gender').on('select2:clear', function () {
            $(this).val('').trigger('change');
            clearFieldError(this.id);
        });
    }

    function setupSalaryCalculation() {
        // Setup real-time calculation
        $('#totalSalary, #basicSalary, #pf, #professionalTax, #esi').on('input', function () {
            calculateGrossSalary();
        });

        // HRA validation when basic salary or HRA changes
        $('#basicSalary, #houseRentAllowance').on('input', function () {
            validateHRA();
            calculateGrossSalary();
        });

        // Basic salary validation against total salary
        $('#basicSalary, #totalSalary').on('input', function () {
            validateBasicSalary();
        });
    }

    function validateBasicSalary() {
        const totalSalary = parseFloat($('#totalSalary').val()) || 0;
        const basicSalary = parseFloat($('#basicSalary').val()) || 0;

        clearFieldError('basicSalary');

        if (basicSalary > totalSalary && totalSalary > 0) {
            showFieldError('basicSalary', 'Basic salary cannot exceed total salary');
            return false;
        }

        return true;
    }

    function validateHRA() {
        const basicSalary = parseFloat($('#basicSalary').val()) || 0;
        const houseRentAllowance = parseFloat($('#houseRentAllowance').val()) || 0;

        clearFieldError('houseRentAllowance');

        if (basicSalary > 0 && houseRentAllowance > 0) {
            const maxHRA = (basicSalary * 0.5) * 2; // (Basic Salary × 50%) × 2

            if (houseRentAllowance > maxHRA) {
                showFieldError('houseRentAllowance', `HRA cannot exceed ₹${maxHRA.toFixed(2)} (Basic Salary × 50% × 2)`);
                return false;
            }
        }

        return true;
    }

    function calculateGrossSalary() {
        const totalSalary = parseFloat($('#totalSalary').val()) || 0;
        const pf = parseFloat($('#pf').val()) || 0;
        const professionalTax = parseFloat($('#professionalTax').val()) || 0;
        const esi = parseFloat($('#esi').val()) || 0;

        const totalDeductions = pf + professionalTax + esi;
        const gross = totalSalary - totalDeductions;

        $('#grossSalaryAfterDeductions').val(gross >= 0 ? gross.toFixed(2) : '0.00');

        // Validate total deductions
        if (totalDeductions > totalSalary && totalSalary > 0) {
            showFieldError('grossSalary', 'Total deductions cannot exceed total salary');
        } else if (gross < 0 && totalSalary > 0) {
            showFieldError('grossSalary', 'Gross salary cannot be negative');
        } else {
            clearFieldError('grossSalary');
        }
    }

    function setupDateValidations() {
        // Set max date for date of birth (18 years ago)
        const today = new Date();
        const eighteenYearsAgo = new Date(today.getFullYear() - 18, today.getMonth(), today.getDate());
        const maxDobDate = eighteenYearsAgo.toISOString().split('T')[0];
        document.getElementById('dateOfBirth').max = maxDobDate;

        // Set max date for joining date (today)
        const maxJoiningDate = today.toISOString().split('T')[0];
        document.getElementById('dateOfJoining').max = maxJoiningDate;

        // Date of birth validation
        $('#dateOfBirth').on('change', function () {
            const selectedDate = new Date(this.value);
            const minAge = new Date();
            minAge.setFullYear(minAge.getFullYear() - 18);

            if (selectedDate > minAge) {
                showFieldError('dateOfBirth', 'Employee must be at least 18 years old');
                this.value = '';
            } else {
                clearFieldError('dateOfBirth');
            }
        });

        // Joining date validation
        $('#dateOfJoining').on('change', function () {
            const selectedDate = new Date(this.value);
            const today = new Date();

            if (selectedDate > today) {
                showFieldError('dateOfJoining', 'Joining date cannot be in the future');
                this.value = '';
            } else {
                clearFieldError('dateOfJoining');
            }
        });
    }

    function setupValidationErrorClearing() {
        $(document).on('input change', '#formDrawer input, #formDrawer select', function () {
            if (this.classList.contains('input-error')) {
                clearFieldError(this.id);
            }
        });
    }

    function showFieldError(fieldId, message) {
        const field = document.getElementById(fieldId);
        const errorDiv = document.getElementById(fieldId + 'Error');

        field.classList.add('input-error');
        if (errorDiv) {
            errorDiv.textContent = message;
            errorDiv.classList.remove('hidden');
        }
    }

    function clearFieldError(fieldId) {
        const field = document.getElementById(fieldId);
        const errorDiv = document.getElementById(fieldId + 'Error');

        if (field) field.classList.remove('input-error');
        if (errorDiv) {
            errorDiv.textContent = '';
            errorDiv.classList.add('hidden');
        }
    }

    function validateAadharUniqueness(aadharNumber) {
        if (aadharNumber.length === 12) {
            fetch(`/Employee/ValidateAadhar?aadhar=${aadharNumber}&employeeId=${currentEmployeeId || 0}`)
                .then(response => response.json())
                .then(data => {
                    if (!data.isUnique) {
                        showFieldError('aadhar', 'This Aadhar number is already registered');
                    } else {
                        clearFieldError('aadhar');
                    }
                })
                .catch(() => {
                    clearFieldError('aadhar');
                });
        }
    }

    function openCreateDrawer() {
        currentMode = 'create';
        currentEmployeeId = null;

        document.getElementById('drawerTitle').textContent = 'Add New Employee';
        document.getElementById('saveButtonText').textContent = 'Create Employee';

        // Reset form
        document.getElementById('employeeForm').reset();
        document.getElementById('employeeId').value = '';
        clearAllErrors();

        // Show drawer
        const drawer = document.getElementById('formDrawer');
        drawer.classList.remove('hidden');
        setTimeout(() => {
            drawer.querySelector('.w-screen').classList.add('translate-x-0');
        }, 10);

        // Re-initialize select2
        $('.searchable-dropdown').select2('destroy').select2({
            placeholder: "Select an option",
            allowClear: true,
            width: '100%',
            dropdownParent: $('#formDrawer')
        });
    }

    function openEditDrawer(employeeId) {
        currentMode = 'edit';
        currentEmployeeId = employeeId;

        document.getElementById('drawerTitle').textContent = 'Edit Employee';
        document.getElementById('saveButtonText').textContent = 'Update Employee';
        clearAllErrors();

        // Show drawer
        const drawer = document.getElementById('formDrawer');
        drawer.classList.remove('hidden');
        setTimeout(() => {
            drawer.querySelector('.w-screen').classList.add('translate-x-0');
        }, 10);

        // Load employee data
        loadEmployeeData(employeeId);
    }

    function viewEmployee(employeeId) {
        const drawer = document.getElementById('detailsDrawer');
        drawer.classList.remove('hidden');
        setTimeout(() => {
            drawer.querySelector('.w-screen').classList.add('translate-x-0');
        }, 10);

        loadEmployeeDetails(employeeId);
    }

    function closeDrawer() {
        const drawer = document.getElementById('formDrawer');
        drawer.querySelector('.w-screen').classList.remove('translate-x-0');
        setTimeout(() => {
            drawer.classList.add('hidden');
        }, 300);
    }

    function closeDetailsDrawer() {
        const drawer = document.getElementById('detailsDrawer');
        drawer.querySelector('.w-screen').classList.remove('translate-x-0');
        setTimeout(() => {
            drawer.classList.add('hidden');
        }, 300);
    }

    function confirmDeleteEmployee(employeeId, employeeName) {
        deleteEmployeeId = employeeId;
        document.getElementById('deleteEmployeeName').textContent = employeeName;
        document.getElementById('deleteModal').classList.remove('hidden');
    }

    function closeDeleteModal() {
        document.getElementById('deleteModal').classList.add('hidden');
        deleteEmployeeId = null;
    }

    function clearAllErrors() {
        const errorFields = ['name', 'dateOfBirth', 'gender', 'email', 'aadhar', 'pan', 'department', 'designation', 'dateOfJoining', 'totalSalary', 'basicSalary', 'houseRentAllowance', 'travelAllowance', 'medicalAllowance', 'otherAllowance', 'pf', 'professionalTax', 'esi', 'grossSalary'];
        errorFields.forEach(field => clearFieldError(field));

        const summaryDiv = document.getElementById('validationSummary');
        summaryDiv.classList.add('hidden');
        summaryDiv.innerHTML = '';
    }

    function validateForm() {
        let isValid = true;
        clearAllErrors();

        // Required field validations
        const requiredFields = [
            { id: 'name', message: 'Name is required' },
            { id: 'dateOfBirth', message: 'Date of birth is required' },
            { id: 'gender', message: 'Gender is required' },
            { id: 'email', message: 'Email is required' },
            { id: 'aadhar', message: 'Aadhar number is required' },
            { id: 'pan', message: 'PAN number is required' },
            { id: 'departmentId', message: 'Department is required' },
            { id: 'designationId', message: 'Designation is required' },
            { id: 'dateOfJoining', message: 'Joining date is required' },
            { id: 'totalSalary', message: 'Total salary is required' },
            { id: 'basicSalary', message: 'Basic salary is required' }
        ];

        requiredFields.forEach(field => {
            const element = document.getElementById(field.id);
            if (!element.value || element.value.trim() === '' || element.value === '0') {
                showFieldError(field.id, field.message);
                isValid = false;
            }
        });

        // Validate salary relationships
        if (!validateBasicSalary()) isValid = false;
        if (!validateHRA()) isValid = false;

        return isValid;
    }

    function loadEmployeeData(employeeId) {
        fetch(`/Employee/GetEmployee/${employeeId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const employee = data.employee;

                    document.getElementById('employeeId').value = employee.id;
                    document.getElementById('code').value = employee.code || '';
                    document.getElementById('name').value = employee.name || '';
                    document.getElementById('dateOfBirth').value = employee.dateOfBirth ? employee.dateOfBirth.split('T')[0] : '';
                    document.getElementById('email').value = employee.email || '';
                    document.getElementById('aadhar').value = employee.aadhar || '';
                    document.getElementById('pan').value = employee.pan || '';
                    document.getElementById('dateOfJoining').value = employee.dateOfJoining ? employee.dateOfJoining.split('T')[0] : '';
                    document.getElementById('eligibleForLease').checked = employee.eligibleForLease || false;
                    document.getElementById('totalSalary').value = employee.totalSalary || '';
                    document.getElementById('basicSalary').value = employee.basicSalary || '';
                    document.getElementById('houseRentAllowance').value = employee.houseRentAllowance || '';
                    document.getElementById('travelAllowance').value = employee.travelAllowance || '';
                    document.getElementById('medicalAllowance').value = employee.medicalAllowance || '';
                    document.getElementById('otherAllowance').value = employee.otherAllowance || '';
                    document.getElementById('pf').value = employee.pf || '';
                    document.getElementById('professionalTax').value = employee.professionalTax || '';
                    document.getElementById('esi').value = employee.esi || '';
                    document.getElementById('grossSalaryAfterDeductions').value = employee.grossSalaryAfterDeductions || '';

                    // Set select2 values
                    $('#gender').val(employee.gender).trigger('change');
                    $('#departmentId').val(employee.departmentId).trigger('change');
                    $('#designationId').val(employee.designationId).trigger('change');

                    calculateGrossSalary();
                }
            })
            .catch(error => {
                console.error('Error loading employee data:', error);
            });
    }

    function loadEmployeeDetails(employeeId) {
        fetch(`/Employee/GetEmployee/${employeeId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const employee = data.employee;
                    const detailsContainer = document.getElementById('employeeDetails');

                    detailsContainer.innerHTML = `
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">Code</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">${employee.code || '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">Name</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">${employee.name || '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">Date of Birth</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">${formatDate(employee.dateOfBirth) || '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">Gender</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">${employee.gender || '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">Email</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">${employee.email || '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">Aadhar</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">${employee.aadhar || '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">PAN</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">${employee.pan || '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">Department</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">${employee.departmentName || '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">Designation</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">${employee.designationName || '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">Date of Joining</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">${formatDate(employee.dateOfJoining) || '-'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">Eligible for Lease</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">${employee.eligibleForLease ? 'Yes' : 'No'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">Total Salary</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">₹${formatCurrency(employee.totalSalary) || '0.00'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">Basic Salary</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">₹${formatCurrency(employee.basicSalary) || '0.00'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">House Rent Allowance (HRA)</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">₹${formatCurrency(employee.houseRentAllowance) || '0.00'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">Travel Allowance (TA)</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">₹${formatCurrency(employee.travelAllowance) || '0.00'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">Medical Allowance</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">₹${formatCurrency(employee.medicalAllowance) || '0.00'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-medium text-gray-500">Other Allowance</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">₹${formatCurrency(employee.otherAllowance) || '0.00'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">PF</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">₹${formatCurrency(employee.pf) || '0.00'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">Professional Tax</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">₹${formatCurrency(employee.professionalTax) || '0.00'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">ESI</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">₹${formatCurrency(employee.esi) || '0.00'}</dd>
                        </div>
                        <div>
                            <dt class="text-sm font-semibold text-gray-500">Gross Salary After Deductions</dt>
                            <dd class="mt-1 p-2 bg-gray-50 rounded-lg border border-gray-200">₹${formatCurrency(employee.grossSalaryAfterDeductions) || '0.00'}</dd>
                        </div>
                    `;
                }
            })
            .catch(error => {
                console.error('Error loading employee details:', error);
            });
    }

    function saveEmployee() {
        if (!validateForm()) {
            showAlert('error', 'Please correct all validation errors before saving.');
            return;
        }

        const button = document.getElementById('saveButton');
        const buttonText = document.getElementById('saveButtonText');
        const buttonSpinner = document.getElementById('saveButtonSpinner');

        // Show loading state
        button.disabled = true;
        button.classList.add('opacity-75');
        buttonSpinner.classList.remove('hidden');

        // Prepare form data
        const form = document.getElementById('employeeForm');
        const formData = new FormData();

        // Add all form fields to FormData
        const inputs = form.querySelectorAll('input, select, textarea');
        inputs.forEach(input => {
            if (input.type === 'checkbox') {
                formData.append(input.name, input.checked ? 'true' : 'false');
            } else if (input.name && input.name !== '__RequestVerificationToken') {
                formData.append(input.name, input.value || '');
            }
        });

        // Add anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        formData.append('__RequestVerificationToken', token);

        // Determine URL based on mode
        const url = currentMode === 'create' ? '/Employee/Create' : '/Employee/Edit';

        fetch(url, {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: formData
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    closeDrawer();
                    showAlert('success', data.message || 'Employee saved successfully!');
                    setTimeout(() => loadEmployees(), 1000);
                } else {
                    if (data.errors) {
                        showValidationErrors(data.errors);
                    } else {
                        showAlert('error', data.message || 'Failed to save employee.');
                    }
                }
            })
            .catch(error => {
                console.error('Error saving employee:', error);
                showAlert('error', 'An error occurred while saving the employee.');
            })
            .finally(() => {
                // Reset button state
                button.disabled = false;
                button.classList.remove('opacity-75');
                buttonSpinner.classList.add('hidden');
            });
    }

    function deleteEmployee() {
        const button = document.getElementById('deleteButton');
        const buttonText = document.getElementById('deleteButtonText');
        const buttonSpinner = document.getElementById('deleteButtonSpinner');

        // Show loading state
        button.disabled = true;
        button.classList.add('opacity-75');
        buttonSpinner.classList.remove('hidden');
        buttonText.textContent = 'Deleting...';

        // Get anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        const formData = new FormData();
        formData.append('Id', deleteEmployeeId);
        formData.append('__RequestVerificationToken', token);

        fetch('/Employee/DeleteConfirmed', {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: formData
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    closeDeleteModal();
                    showAlert('success', data.message || 'Employee deleted successfully!');
                    setTimeout(() => loadEmployees(), 1000);
                } else {
                    showAlert('error', data.message || 'Failed to delete employee.');
                }
            })
            .catch(error => {
                console.error('Error deleting employee:', error);
                showAlert('error', 'An error occurred while deleting the employee.');
            })
            .finally(() => {
                // Reset button state
                button.disabled = false;
                button.classList.remove('opacity-75');
                buttonSpinner.classList.add('hidden');
                buttonText.textContent = 'Delete';
            });
    }

    function showValidationErrors(errors) {
        const summaryDiv = document.getElementById('validationSummary');
        summaryDiv.innerHTML = '';
        summaryDiv.classList.add('hidden');

        if (errors && Object.keys(errors).length > 0) {
            let errorList = '<h4 class="font-semibold mb-2">Please correct the following errors:</h4><ul class="list-disc list-inside space-y-1">';

            Object.keys(errors).forEach(field => {
                errors[field].forEach(error => {
                    errorList += `<li class="text-sm">${error}</li>`;
                    showFieldError(field, error);
                });
            });

            errorList += '</ul>';
            summaryDiv.innerHTML = errorList;
            summaryDiv.classList.remove('hidden');

            // Scroll to the top of the drawer to show the error summary
            document.querySelector('#formDrawer .flex-1.overflow-y-auto').scrollTop = 0;
        }
    }

    function formatDate(dateString) {
        if (!dateString) return '';
        const date = new Date(dateString);
        return date.toLocaleDateString('en-GB');
    }

    function formatCurrency(amount) {
        if (!amount) return '0.00';
        return parseFloat(amount).toFixed(2);
    }

    function showAlert(type, message) {
        const container = document.getElementById('alertContainer');
        const alertClass = type === 'success' ? 'bg-green-100 border-green-400 text-green-700' : 'bg-red-100 border-red-400 text-red-700';
        
        container.innerHTML = `
            <div class="${alertClass} px-4 py-3 rounded border" role="alert">
                <span class="block sm:inline">${message}</span>
            </div>
        `;
        
        setTimeout(() => {
            container.innerHTML = '';
        }, 5000);
    }

    // Close modals when clicking outside
    document.addEventListener('click', function (event) {
        if (event.target.classList.contains('bg-black') && event.target.classList.contains('bg-opacity-50')) {
            if (!document.getElementById('formDrawer').classList.contains('hidden')) {
                closeDrawer();
            }
            if (!document.getElementById('detailsDrawer').classList.contains('hidden')) {
                closeDetailsDrawer();
            }
            if (!document.getElementById('deleteModal').classList.contains('hidden')) {
                closeDeleteModal();
            }
        }
    });
</script>